       # game.py
       # -------
       # Licensing Information: Please do not distribute or publish solutions to this
       # project. You are free to use and extend these projects for educational
       # purposes. The Pacman AI projects were developed at UC Berkeley, primarily by
       # John DeNero (denero@cs.berkeley.edu) and Dan Klein (klein@cs.berkeley.edu).
       # For more info, see http://inst.eecs.berkeley.edu/~cs188/sp09/pacman.html
       
    1: from util import *
    1: from util import raiseNotDefined
    1: import time, os
    1: import traceback
       
    1: try:
    1:   import boinc
         _BOINC_ENABLED = True
    1: except:
    1:   _BOINC_ENABLED = False
       
       #######################
       # Parts worth reading #
       #######################
       
    2: class Agent:
         """
         An agent must define a getAction method, but may also define the
         following methods which will be called if they exist:
       
         def registerInitialState(self, state): # inspects the starting state
    1:   """
    1:   def __init__(self, index=0):
           self.index = index
       
    1:   def getAction(self, state):
           """
           The Agent will receive a GameState (from either {pacman, capture, sonar}.py) and
           must return an action from Directions.{North, South, East, West, Stop}
           """
           raiseNotDefined()
       
    2: class Directions:
    1:   NORTH = 'North'
    1:   SOUTH = 'South'
    1:   EAST = 'East'
    1:   WEST = 'West'
    1:   STOP = 'Stop'
       
    1:   LEFT =       {NORTH: WEST,
    1:                  SOUTH: EAST,
    1:                  EAST:  NORTH,
    1:                  WEST:  SOUTH,
    1:                  STOP:  STOP}
       
    6:   RIGHT =      dict([(y,x) for x, y in LEFT.items()])
       
    1:   REVERSE = {NORTH: SOUTH,
    1:              SOUTH: NORTH,
    1:              EAST: WEST,
    1:              WEST: EAST,
    1:              STOP: STOP}
       
    2: class Configuration:
         """
         A Configuration holds the (x,y) coordinate of a character, along with its
         traveling direction.
       
         The convention for positions, like a graph, is that (0,0) is the lower left corner, x increases
         horizontally and y increases vertically.  Therefore, north is the direction of increasing y, or (0,1).
    1:   """
       
    1:   def __init__(self, pos, direction):
   61:     self.pos = pos
   61:     self.direction = direction
       
    1:   def getPosition(self):
  242:     return (self.pos)
       
    1:   def getDirection(self):
  241:     return self.direction
       
    1:   def isInteger(self):
           x,y = self.pos
           return x == int(x) and y == int(y)
       
    1:   def __eq__(self, other):
  544:     if other == None: return False
           return (self.pos == other.pos and self.direction == other.direction)
       
    1:   def __hash__(self):
           x = hash(self.pos)
           y = hash(self.direction)
           return hash(x + 13 * y)
       
    1:   def __str__(self):
           return "(x,y)="+str(self.pos)+", "+str(self.direction)
       
    1:   def generateSuccessor(self, vector):
           """
           Generates a new configuration reached by translating the current
           configuration by the action vector.  This is a low-level call and does
           not attempt to respect the legality of the movement.
       
           Actions are movement vectors.
           """
   60:     x, y= self.pos
   60:     dx, dy = vector
   60:     direction = Actions.vectorToDirection(vector)
   60:     if direction == Directions.STOP:
             direction = self.direction # There is no stop direction
   60:     return Configuration((x + dx, y+dy), direction)
       
    2: class AgentState:
         """
         AgentStates hold the state of an agent (configuration, speed, scared, etc).
    1:   """
       
    1:   def __init__( self, startConfiguration, isPacman ):
  245:     self.start = startConfiguration
  245:     self.configuration = startConfiguration
  245:     self.isPacman = isPacman
  245:     self.scaredTimer = 0
       
    1:   def __str__( self ):
           if self.isPacman:
             return "Pacman: " + str( self.configuration )
           else:
             return "Ghost: " + str( self.configuration )
       
    1:   def __eq__( self, other ):
           if other == None:
             return False
           return self.configuration == other.configuration and self.scaredTimer == other.scaredTimer
       
    1:   def __hash__(self):
           return hash(hash(self.configuration) + 13 * hash(self.scaredTimer))
       
    1:   def copy( self ):
  244:     state = AgentState( self.start, self.isPacman )
  244:     state.configuration = self.configuration
  244:     state.scaredTimer = self.scaredTimer
  244:     return state
       
    1:   def getPosition(self):
  182:     if self.configuration == None: return None
  182:     return self.configuration.getPosition()
       
    1:   def getDirection(self):
           return self.configuration.getDirection()
       
    2: class Grid:
         """
         A 2-dimensional array of objects backed by a list of lists.  Data is accessed
         via grid[x][y] where (x,y) are positions on a Pacman map with x horizontal,
         y vertical and the origin (0,0) in the bottom left corner.
       
         The __str__ method constructs an output that is oriented like a pacman board.
    1:   """
    1:   def __init__(self, width, height, initialValue=False, bitRepresentation=None):
20311:     if initialValue not in [False, True]: raise Exception('Grids can only contain booleans')
20311:     self.CELLS_PER_INT = 30
       
20311:     self.width = width
20311:     self.height = height
3270071:     self.data = [[initialValue for y in range(height)] for x in range(width)]
20311:     if bitRepresentation:
             self._unpackBits(bitRepresentation)
       
    1:   def __getitem__(self, i):
4201941:     return self.data[i]
       
    1:   def __setitem__(self, key, item):
           self.data[key] = item
       
    1:   def __str__(self):
           out = [[str(self.data[x][y])[0] for x in range(self.width)] for y in range(self.height)]
           out.reverse()
           return '\n'.join([''.join(x) for x in out])
       
    1:   def __eq__(self, other):
3605314:     if other == None: return False
1802657:     return self.data == other.data
       
    1:   def __hash__(self):
           # return hash(str(self))
           base = 1
           h = 0
           for l in self.data:
             for i in l:
               if i:
                 h += base
               base *= 2
           return hash(h)
       
    1:   def copy(self):
20001:     g = Grid(self.width, self.height)
420021:     g.data = [x[:] for x in self.data]
20001:     return g
       
    1:   def deepCopy(self):
   62:     return self.copy()
       
    1:   def shallowCopy(self):
  184:     g = Grid(self.width, self.height)
  184:     g.data = self.data
  184:     return g
       
    1:   def count(self, item =True ):
195720:     return sum([x.count(item) for x in self.data])
       
    1:   def asList(self, key = True):
29557:     list = []
620697:     for x in range(self.width):
4729120:       for y in range(self.height):
4137980:         if self[x][y] == key: list.append( (x,y) )
29557:     return list
       
    1:   def packBits(self):
           """
           Returns an efficient int list representation
       
           (width, height, bitPackedInts...)
           """
           bits = [self.width, self.height]
           currentInt = 0
           for i in range(self.height * self.width):
             bit = self.CELLS_PER_INT - (i % self.CELLS_PER_INT) - 1
             x, y = self._cellIndexToPosition(i)
             if self[x][y]:
               currentInt += 2 ** bit
             if (i + 1) % self.CELLS_PER_INT == 0:
               bits.append(currentInt)
               currentInt = 0
           bits.append(currentInt)
           return tuple(bits)
       
    1:   def _cellIndexToPosition(self, index):
           x = index / self.height
           y = index % self.height
           return x, y
       
    1:   def _unpackBits(self, bits):
           """
           Fills in data from a bit-level representation
           """
           cell = 0
           for packed in bits:
             for bit in self._unpackInt(packed, self.CELLS_PER_INT):
               if cell == self.width * self.height: break
               x, y = self._cellIndexToPosition(cell)
               self[x][y] = bit
               cell += 1
       
    1:   def _unpackInt(self, packed, size):
           bools = []
           if packed < 0: raise ValueError, "must be a positive integer"
           for i in range(size):
             n = 2 ** (self.CELLS_PER_INT - i - 1)
             if packed >= n:
               bools.append(True)
               packed -= n
             else:
               bools.append(False)
           return bools
       
    1: def reconstituteGrid(bitRep):
         if type(bitRep) is not type((1,2)):
           return bitRep
         width, height = bitRep[:2]
         return Grid(width, height, bitRepresentation= bitRep[2:])
       
       ####################################
       # Parts you shouldn't have to read #
       ####################################
       
    2: class Actions:
         """
         A collection of static methods for manipulating move actions.
    1:   """
         # Directions
    1:   _directions = {Directions.NORTH: (0, 1),
    1:                  Directions.SOUTH: (0, -1),
    1:                  Directions.EAST:  (1, 0),
    1:                  Directions.WEST:  (-1, 0),
    1:                  Directions.STOP:  (0, 0)}
       
    1:   _directionsAsList = _directions.items()
       
    1:   TOLERANCE = .001
       
    1:   def reverseDirection(action):
           if action == Directions.NORTH:
             return Directions.SOUTH
           if action == Directions.SOUTH:
             return Directions.NORTH
           if action == Directions.EAST:
             return Directions.WEST
           if action == Directions.WEST:
             return Directions.EAST
           return action
    1:   reverseDirection = staticmethod(reverseDirection)
       
    1:   def vectorToDirection(vector):
   60:     dx, dy = vector
   60:     if dy > 0:
    7:       return Directions.NORTH
   53:     if dy < 0:
    9:       return Directions.SOUTH
   44:     if dx < 0:
   26:       return Directions.WEST
   18:     if dx > 0:
   18:       return Directions.EAST
           return Directions.STOP
    1:   vectorToDirection = staticmethod(vectorToDirection)
       
    1:   def directionToVector(direction, speed = 1.0):
37340:     dx, dy =  Actions._directions[direction]
37340:     return (dx * speed, dy * speed)
    1:   directionToVector = staticmethod(directionToVector)
       
    1:   def getPossibleActions(config, walls):
   60:     possible = []
   60:     x, y = config.pos
   60:     x_int, y_int = int(x + 0.5), int(y + 0.5)
       
           # In between grid points, all agents must continue straight
   60:     if (abs(x - x_int) + abs(y - y_int)  > Actions.TOLERANCE):
             return [config.getDirection()]
       
  360:     for dir, vec in Actions._directionsAsList:
  300:       dx, dy = vec
  300:       next_y = y_int + dy
  300:       next_x = x_int + dx
  300:       if not walls[next_x][next_y]: possible.append(dir)
       
   60:     return possible
       
    1:   getPossibleActions = staticmethod(getPossibleActions)
       
    1:   def getLegalNeighbors(position, walls):
           x,y = position
           x_int, y_int = int(x + 0.5), int(y + 0.5)
           neighbors = []
           for dir, vec in Actions._directionsAsList:
             dx, dy = vec
             next_x = x_int + dx
             if next_x < 0 or next_x == walls.width: continue
             next_y = y_int + dy
             if next_y < 0 or next_y == walls.height: continue
             if not walls[next_x][next_y]: neighbors.append((next_x, next_y))
           return neighbors
    1:   getLegalNeighbors = staticmethod(getLegalNeighbors)
       
    1:   def getSuccessor(position, action):
           dx, dy = Actions.directionToVector(action)
           x, y = position
           return (x + dx, y + dy)
    1:   getSuccessor = staticmethod(getSuccessor)
       
    2: class GameStateData:
         """
       
    1:   """
    1:   def __init__( self, prevState = None ):
           """
           Generates a new data packet by copying information from its predecessor.
           """
  185:     if prevState != None:
  184:       self.food = prevState.food.shallowCopy()
  184:       self.capsules = prevState.capsules[:]
  184:       self.agentStates = self.copyAgentStates( prevState.agentStates )
  184:       self.layout = prevState.layout
  184:       self._eaten = prevState._eaten
  184:       self.score = prevState.score
  185:     self._foodEaten = None
  185:     self._capsuleEaten = None
  185:     self._agentMoved = None
  185:     self._lose = False
  185:     self._win = False
  185:     self.scoreChange = 0
       
    1:   def deepCopy( self ):
   62:     state = GameStateData( self )
   62:     state.food = self.food.deepCopy()
   62:     state.layout = self.layout.deepCopy()
   62:     state._agentMoved = self._agentMoved
   62:     state._foodEaten = self._foodEaten
   62:     state._capsuleEaten = self._capsuleEaten
   62:     return state
       
    1:   def copyAgentStates( self, agentStates ):
  184:     copiedStates = []
  368:     for agentState in agentStates:
  184:       copiedStates.append( agentState.copy() )
  184:     return copiedStates
       
    1:   def __eq__( self, other ):
           """
           Allows two states to be compared.
           """
           if other == None: return False
           # TODO Check for type of other
           if not self.agentStates == other.agentStates: return False
           if not self.food == other.food: return False
           if not self.capsules == other.capsules: return False
           if not self.score == other.score: return False
           return True
       
    1:   def __hash__( self ):
           """
           Allows states to be keys of dictionaries.
           """
           for i, state in enumerate( self.agentStates ):
             try:
               int(hash(state))
             except TypeError, e:
               print e
               #hash(state)
           return int((hash(tuple(self.agentStates)) + 13*hash(self.food) + 113* hash(tuple(self.capsules)) + 7 * hash(self.score)) % 1048575 )
       
    1:   def __str__( self ):
           width, height = self.layout.width, self.layout.height
           map = Grid(width, height)
           if type(self.food) == type((1,2)):
             self.food = reconstituteGrid(self.food)
           for x in range(width):
             for y in range(height):
               food, walls = self.food, self.layout.walls
               map[x][y] = self._foodWallStr(food[x][y], walls[x][y])
       
           for agentState in self.agentStates:
             if agentState == None: continue
             if agentState.configuration == None: continue
             x,y = [int( i ) for i in nearestPoint( agentState.configuration.pos )]
             agent_dir = agentState.configuration.direction
             if agentState.isPacman:
               map[x][y] = self._pacStr( agent_dir )
             else:
               map[x][y] = self._ghostStr( agent_dir )
       
           for x, y in self.capsules:
             map[x][y] = 'o'
       
           return str(map) + ("\nScore: %d\n" % self.score)
       
    1:   def _foodWallStr( self, hasFood, hasWall ):
           if hasFood:
             return '.'
           elif hasWall:
             return '%'
           else:
             return ' '
       
    1:   def _pacStr( self, dir ):
           if dir == Directions.NORTH:
             return 'v'
           if dir == Directions.SOUTH:
             return '^'
           if dir == Directions.WEST:
             return '>'
           return '<'
       
    1:   def _ghostStr( self, dir ):
           return 'G'
           if dir == Directions.NORTH:
             return 'M'
           if dir == Directions.SOUTH:
             return 'W'
           if dir == Directions.WEST:
             return '3'
           return 'E'
       
    1:   def initialize( self, layout, numGhostAgents ):
           """
           Creates an initial game state from a layout array (see layout.py).
           """
    1:     self.food = layout.food.copy()
    1:     self.capsules = layout.capsules[:]
    1:     self.layout = layout
    1:     self.score = 0
    1:     self.scoreChange = 0
       
    1:     self.agentStates = []
    1:     numGhosts = 0
    2:     for isPacman, pos in layout.agentPositions:
    1:       if not isPacman:
               if numGhosts == numGhostAgents: continue # Max ghosts reached already
               else: numGhosts += 1
    1:       self.agentStates.append( AgentState( Configuration( pos, Directions.STOP), isPacman) )
    2:     self._eaten = [False for a in self.agentStates]
       
    2: class Game:
         """
         The Game manages the control flow, soliciting actions from agents.
    1:   """
       
    1:   def __init__( self, agents, display, rules, startingIndex=0, muteAgents=False, catchExceptions=False ):
    1:     self.agentCrashed = False
    1:     self.agents = agents
    1:     self.display = display
    1:     self.rules = rules
    1:     self.startingIndex = startingIndex
    1:     self.gameOver = False
    1:     self.muteAgents = muteAgents
    1:     self.catchExceptions = catchExceptions
    1:     self.moveHistory = []
    2:     self.totalAgentTimes = [0 for agent in agents]
    2:     self.totalAgentTimeWarnings = [0 for agent in agents]
    1:     self.agentTimeout = False
       
    1:   def getProgress(self):
           if self.gameOver:
             return 1.0
           else:
             return self.rules.getProgress(self)
       
    1:   def _agentCrash( self, agentIndex, quiet=False):
           "Helper method for handling agent crashes"
           if not quiet: traceback.print_exc()
           self.gameOver = True
           self.agentCrashed = True
           self.rules.agentCrash(self, agentIndex)
       
    1:   OLD_STDOUT = None
    1:   OLD_STDERR = None
       
    1:   def mute(self):
   61:     if not self.muteAgents: return
           global OLD_STDOUT, OLD_STDERR
           import cStringIO
           OLD_STDOUT = sys.stdout
           OLD_STDERR = sys.stderr
           sys.stdout = cStringIO.StringIO()
           sys.stderr = cStringIO.StringIO()
       
    1:   def unmute(self):
   61:     if not self.muteAgents: return
           global OLD_STDOUT, OLD_STDERR
           sys.stdout.close()
           sys.stderr.close()
           # Revert stdout/stderr to originals
           sys.stdout = OLD_STDOUT
           sys.stderr = OLD_STDERR
       
       
    1:   def run( self ):
           """
           Main control loop for game play.
           """
    1:     self.display.initialize(self.state.data)
    1:     self.numMoves = 0
       
           ###self.display.initialize(self.state.makeObservation(1).data)
           # inform learning agents of the game start
    2:     for i in range(len(self.agents)):
    1:       agent = self.agents[i]
    1:       if not agent:
               # this is a null agent, meaning it failed to load
               # the other team wins
               self._agentCrash(i, quiet=True)
               return
    1:       if ("registerInitialState" in dir(agent)):
    1:         self.mute()
    1:         if self.catchExceptions:
                 try:
                   timed_func = TimeoutFunction(agent.registerInitialState, int(self.rules.getMaxStartupTime(i)))
                   try:
                     start_time = time.time()
                     timed_func(self.state.deepCopy())
                     time_taken = time.time() - start_time
                     self.totalAgentTimes[i] += time_taken
                   except TimeoutFunctionException:
                     print "Agent %d ran out of time on startup!" % i
                     self.unmute()
                     self.agentTimeout = True
                     self._agentCrash(i, quiet=True)
                     return
                 except Exception,data:
                   self.unmute()
                   self._agentCrash(i, quiet=True)
                   return
               else:
    1:           agent.registerInitialState(self.state.deepCopy())
               ## TODO: could this exceed the total time
    1:         self.unmute()
       
    1:     agentIndex = self.startingIndex
    1:     numAgents = len( self.agents )
       
   61:     while not self.gameOver:
             # Fetch the next agent
   60:       agent = self.agents[agentIndex]
   60:       move_time = 0
   60:       skip_action = False
             # Generate an observation of the state
   60:       if 'observationFunction' in dir( agent ):
               self.mute()
               if self.catchExceptions:
                 try:
                   timed_func = TimeoutFunction(agent.observationFunction, int(self.rules.getMoveTimeout(agentIndex)))
                   try:
                     start_time = time.time()
                     observation = timed_func(self.state.deepCopy())
                   except TimeoutFunctionException:
                     skip_action = True
                   move_time += time.time() - start_time
                   self.unmute()
                 except Exception,data:
                   self.unmute()
                   self._agentCrash(agentIndex, quiet=True)
                   return
               else:
                 observation = agent.observationFunction(self.state.deepCopy())
               self.unmute()
             else:
   60:         observation = self.state.deepCopy()
       
             # Solicit an action
   60:       action = None
   60:       self.mute()
   60:       if self.catchExceptions:
               try:
                 timed_func = TimeoutFunction(agent.getAction, int(self.rules.getMoveTimeout(agentIndex)) - int(move_time))
                 try:
                   start_time = time.time()
                   if skip_action:
                     raise TimeoutFunctionException()
                   action = timed_func( observation )
                 except TimeoutFunctionException:
                   print "Agent %d timed out on a single move!" % agentIndex
                   self.agentTimeout = True
                   self.unmute()
                   self._agentCrash(agentIndex, quiet=True)
                   return
       
                 move_time += time.time() - start_time
       
                 if move_time > self.rules.getMoveWarningTime(agentIndex):
                   self.totalAgentTimeWarnings[agentIndex] += 1
                   print "Agent %d took too long to make a move! This is warning %d" % (agentIndex, self.totalAgentTimeWarnings[agentIndex])
                   if self.totalAgentTimeWarnings[agentIndex] > self.rules.getMaxTimeWarnings(agentIndex):
                     print "Agent %d exceeded the maximum number of warnings: %d" % (agentIndex, self.totalAgentTimeWarnings[agentIndex])
                     self.agentTimeout = True
                     self.unmute()
                     self._agentCrash(agentIndex, quiet=True)
       
                 self.totalAgentTimes[agentIndex] += move_time
                 #print "Agent: %d, time: %f, total: %f" % (agentIndex, move_time, self.totalAgentTimes[agentIndex])
                 if self.totalAgentTimes[agentIndex] > self.rules.getMaxTotalTime(agentIndex):
                   print "Agent %d ran out of time! (time: %1.2f)" % (agentIndex, self.totalAgentTimes[agentIndex])
                   self.agentTimeout = True
                   self.unmute()
                   self._agentCrash(agentIndex, quiet=True)
                   return
                 self.unmute()
               except Exception,data:
                 self.unmute()
                 self._agentCrash(agentIndex)
                 return
             else:
   60:         action = agent.getAction(observation)
   60:       self.unmute()
       
             # Execute the action
   60:       self.moveHistory.append( (agentIndex, action) )
   60:       if self.catchExceptions:
               try:
                 self.state = self.state.generateSuccessor( agentIndex, action )
               except Exception,data:
                 self._agentCrash(agentIndex)
                 return
             else:
   60:         self.state = self.state.generateSuccessor( agentIndex, action )
       
             # Change the display
   60:       self.display.update( self.state.data )
             ###idx = agentIndex - agentIndex % 2 + 1
             ###self.display.update( self.state.makeObservation(idx).data )
       
             # Allow for game specific conditions (winning, losing, etc.)
   60:       self.rules.process(self.state, self)
             # Track progress
   60:       if agentIndex == numAgents + 1: self.numMoves += 1
             # Next agent
   60:       agentIndex = ( agentIndex + 1 ) % numAgents
       
   60:       if _BOINC_ENABLED:
               boinc.set_fraction_done(self.getProgress())
       
           # inform a learning agent of the game result
    2:     for agent in self.agents:
    1:       if "final" in dir( agent ) :
               try:
                 self.mute()
                 agent.final( self.state )
                 self.unmute()
               except Exception,data:
                 if not self.catchExceptions: raise
                 self.unmute()
                 print "Exception",data
                 self._agentCrash(agent.index)
                 return
    1:     self.display.finish()
       
       
       
       
