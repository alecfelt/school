       # pacmanAgents.py
       # ---------------
       # Licensing Information: Please do not distribute or publish solutions to this
       # project. You are free to use and extend these projects for educational
       # purposes. The Pacman AI projects were developed at UC Berkeley, primarily by
       # John DeNero (denero@cs.berkeley.edu) and Dan Klein (klein@cs.berkeley.edu).
       # For more info, see http://inst.eecs.berkeley.edu/~cs188/sp09/pacman.html
       
    1: from pacman import Directions
    1: from game import Agent
    1: import random
    1: import game
    1: import util
       
    2: class LeftTurnAgent(game.Agent):
    1:   "An agent that turns left at every opportunity"
         
    1:   def getAction(self, state):
           legal = state.getLegalPacmanActions()
           current = state.getPacmanState().configuration.direction
           if current == Directions.STOP: current = Directions.NORTH
           left = Directions.LEFT[current]
           if left in legal: return left
           if current in legal: return current
           if Directions.RIGHT[current] in legal: return Directions.RIGHT[current]
           if Directions.LEFT[left] in legal: return Directions.LEFT[left]
           return Directions.STOP
       
    2: class GreedyAgent(Agent):
    1:   def __init__(self, evalFn="scoreEvaluation"):
           self.evaluationFunction = util.lookup(evalFn, globals())
           assert self.evaluationFunction != None
               
    1:   def getAction(self, state):
           # Generate candidate actions
           legal = state.getLegalPacmanActions()
           if Directions.STOP in legal: legal.remove(Directions.STOP)
             
           successors = [(state.generateSuccessor(0, action), action) for action in legal] 
           scored = [(self.evaluationFunction(state), action) for state, action in successors]
           bestScore = max(scored)[0]
           bestActions = [pair[1] for pair in scored if pair[0] == bestScore]
           return random.choice(bestActions)
         
    1: def scoreEvaluation(state):
         return state.getScore()  
