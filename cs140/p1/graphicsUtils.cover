       # graphicsUtils.py
       # ----------------
       # Licensing Information: Please do not distribute or publish solutions to this
       # project. You are free to use and extend these projects for educational
       # purposes. The Pacman AI projects were developed at UC Berkeley, primarily by
       # John DeNero (denero@cs.berkeley.edu) and Dan Klein (klein@cs.berkeley.edu).
       # For more info, see http://inst.eecs.berkeley.edu/~cs188/sp09/pacman.html
       
    1: import sys
    1: import math
    1: import random
    1: import string
    1: import time
    1: import types
    1: import Tkinter
       
    1: _Windows = sys.platform == 'win32'  # True if on Win95/98/NT
       
    1: _root_window = None      # The root window for graphics output
    1: _canvas = None      # The canvas which holds graphics
    1: _canvas_xs = None      # Size of canvas object
    1: _canvas_ys = None
    1: _canvas_x = None      # Current position on canvas
    1: _canvas_y = None
    1: _canvas_col = None      # Current colour (set to black below)
    1: _canvas_tsize = 12
    1: _canvas_tserifs = 0
       
    1: def formatColor(r, g, b):
   17:   return '#%02x%02x%02x' % (int(r * 255), int(g * 255), int(b * 255))
       
    1: def colorToVector(color):
   24:   return map(lambda x: int(x, 16) / 256.0, [color[1:3], color[3:5], color[5:7]])
       
    1: if _Windows:
           _canvas_tfonts = ['times new roman', 'lucida console']
       else:
    1:     _canvas_tfonts = ['times', 'lucidasans-24']
           pass # XXX need defaults here
       
    1: def sleep(secs):
           global _root_window
  241:     if _root_window == None:
               time.sleep(secs)
           else:
  241:         _root_window.update_idletasks()
  241:         _root_window.after(int(1000 * secs), _root_window.quit)
  241:         _root_window.mainloop()
       
    1: def begin_graphics(width=640, height=480, color=formatColor(0, 0, 0), title=None):
       
           global _root_window, _canvas, _canvas_x, _canvas_y, _canvas_xs, _canvas_ys, _bg_color
       
           # Check for duplicate call
    1:     if _root_window is not None:
               # Lose the window.
               _root_window.destroy()
               
           # Save the canvas size parameters
    1:     _canvas_xs, _canvas_ys = width - 1, height - 1
    1:     _canvas_x, _canvas_y = 0, _canvas_ys
    1:     _bg_color = color
           
           # Create the root window
    1:     _root_window = Tkinter.Tk()
    1:     _root_window.protocol('WM_DELETE_WINDOW', _destroy_window)
    1:     _root_window.title(title or 'Graphics Window')
    1:     _root_window.resizable(0, 0)
       
           # Create the canvas object
    1:     try:
    1:       _canvas = Tkinter.Canvas(_root_window, width=width, height=height)
    1:       _canvas.pack()
    1:       draw_background()
    1:       _canvas.update()
           except:
             _root_window = None
             raise
       
           # Bind to key-down and key-up events
    1:     _root_window.bind( "<KeyPress>", _keypress )
    1:     _root_window.bind( "<KeyRelease>", _keyrelease )
    1:     _root_window.bind( "<FocusIn>", _clear_keys )
    1:     _root_window.bind( "<FocusOut>", _clear_keys )
    1:     _root_window.bind( "<Button-1>", _leftclick )
    1:     _root_window.bind( "<Button-2>", _rightclick )
    1:     _root_window.bind( "<Button-3>", _rightclick )
    1:     _root_window.bind( "<Control-Button-1>", _ctrl_leftclick)
    1:     _clear_keys()
       
    1: _leftclick_loc = None
    1: _rightclick_loc = None
    1: _ctrl_leftclick_loc = None
       
    1: def _leftclick(event):
         global _leftclick_loc
         _leftclick_loc = (event.x, event.y)
       
    1: def _rightclick(event):
         global _rightclick_loc
         _rightclick_loc = (event.x, event.y)
       
    1: def _ctrl_leftclick(event):
         global _ctrl_leftclick_loc
         _ctrl_leftclick_loc = (event.x, event.y)
       
    1: def wait_for_click():
         while True:
           global _leftclick_loc
           global _rightclick_loc
           global _ctrl_leftclick_loc
           if _leftclick_loc != None:
             val = _leftclick_loc
             _leftclick_loc = None
             return val, 'left'
           if _rightclick_loc != None:
             val = _rightclick_loc
             _rightclick_loc = None
             return val, 'right'
           if _ctrl_leftclick_loc != None:
             val = _ctrl_leftclick_loc
             _ctrl_leftclick_loc = None
             return val, 'ctrl_left'
           sleep(0.05)  
       
    1: def draw_background():
    1:     corners = [(0,0), (0, _canvas_ys), (_canvas_xs, _canvas_ys), (_canvas_xs, 0)]
    1:     polygon(corners, _bg_color, fillColor=_bg_color, filled=True, smoothed=False)
           
    1: def _destroy_window(event=None):
           sys.exit(0)
       #    global _root_window
       #    _root_window.destroy()
       #    _root_window = None
           #print "DESTROY"
       
    1: def end_graphics():
           global _root_window, _canvas, _mouse_enabled
    1:     try:
    1:       try:
    1:         sleep(1)
    1:         if _root_window != None: 
    1:           _root_window.destroy()
             except SystemExit, e:
               print 'Ending graphics raised an exception:', e
           finally:
    1:       _root_window = None
    1:       _canvas = None
    1:       _mouse_enabled = 0
    1:       _clear_keys()
       
    1: def clear_screen(background=None):
           global _canvas_x, _canvas_y
           _canvas.delete('all')
           draw_background()
           _canvas_x, _canvas_y = 0, _canvas_ys
       
    1: def polygon(coords, outlineColor, fillColor=None, filled=1, smoothed=1, behind=0, width=1):
    1:   c = []
    5:   for coord in coords:
    4:     c.append(coord[0])
    4:     c.append(coord[1])
    1:   if fillColor == None: fillColor = outlineColor
    1:   if filled == 0: fillColor = ""
    1:   poly = _canvas.create_polygon(c, outline=outlineColor, fill=fillColor, smooth=smoothed, width=width)
    1:   if behind > 0:    
           _canvas.tag_lower(poly, behind) # Higher should be more visible
    1:   return poly
         
    1: def square(pos, r, color, filled=1, behind=0):
         x, y = pos
         coords = [(x - r, y - r), (x + r, y - r), (x + r, y + r), (x - r, y + r)]
         return polygon(coords, color, color, filled, 0, behind=behind)
       
    1: def circle(pos, r, outlineColor, fillColor, endpoints=None, style='pieslice', width=2):
   50:     x, y = pos
   50:     x0, x1 = x - r - 1, x + r
   50:     y0, y1 = y - r - 1, y + r
   50:     if endpoints == None:
   13:       e = [0, 359]
           else:
   37:       e = list(endpoints)
   51:     while e[0] > e[1]: e[1] = e[1] + 360
       
   50:     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
   50:                               extent=e[1] - e[0], start=e[0], style=style, width=width)
       
    1: def image(pos, file="../../blueghost.gif"):
           x, y = pos
           # img = PhotoImage(file=file)
           return _canvas.create_image(x, y, image = Tkinter.PhotoImage(file=file), anchor = Tkinter.NW)
           
           
    1: def refresh():
  542:       _canvas.update_idletasks()
                                                           
    1: def moveCircle(id, pos, r, endpoints=None):
           global _canvas_x, _canvas_y
           
  240:     x, y = pos
       #    x0, x1 = x - r, x + r + 1
       #    y0, y1 = y - r, y + r + 1
  240:     x0, x1 = x - r - 1, x + r
  240:     y0, y1 = y - r - 1, y + r
  240:     if endpoints == None:
             e = [0, 359]
           else:
  240:       e = list(endpoints)
  480:     while e[0] > e[1]: e[1] = e[1] + 360
       
  240:     edit(id, ('start', e[0]), ('extent', e[1] - e[0]))
  240:     move_to(id, x0, y0)
       
    1: def edit(id, *args):
  240:     _canvas.itemconfigure(id, **dict(args))
           
    1: def text(pos, color, contents, font='Helvetica', size=12, style='normal', anchor="nw"):
           global _canvas_x, _canvas_y
    1:     x, y = pos
    1:     font = (font, str(size), style)
    1:     return _canvas.create_text(x, y, fill=color, text=contents, font=font, anchor=anchor)
       
    1: def changeText(id, newText, font=None, size=12, style='normal'):
   60:   _canvas.itemconfigure(id, text=newText)
   60:   if font != None:
           _canvas.itemconfigure(id, font=(font, '-%d' % size, style))
       
    1: def changeColor(id, newColor):
         _canvas.itemconfigure(id, fill=newColor)
       
    1: def line(here, there, color=formatColor(0, 0, 0), width=2):
  304:   x0, y0 = here[0], here[1]
  304:   x1, y1 = there[0], there[1]
  304:   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
       
       ##############################################################################
       ### Keypress handling ########################################################
       ##############################################################################
       
       # We bind to key-down and key-up events.
       
    1: _keysdown = {}
    1: _keyswaiting = {}
       # This holds an unprocessed key release.  We delay key releases by up to
       # one call to keys_pressed() to get round a problem with auto repeat.
    1: _got_release = None
       
    1: def _keypress(event):
           global _got_release
           #remap_arrows(event)
           _keysdown[event.keysym] = 1
           _keyswaiting[event.keysym] = 1
       #    print event.char, event.keycode
           _got_release = None
       
    1: def _keyrelease(event):
           global _got_release
           #remap_arrows(event)
           try:
             del _keysdown[event.keysym]
           except:
             pass
           _got_release = 1
           
    1: def remap_arrows(event):
           # TURN ARROW PRESSES INTO LETTERS (SHOULD BE IN KEYBOARD AGENT)
           if event.char in ['a', 's', 'd', 'w']:
             return
           if event.keycode in [37, 101]: # LEFT ARROW (win / x)
             event.char = 'a'
           if event.keycode in [38, 99]: # UP ARROW
             event.char = 'w'
           if event.keycode in [39, 102]: # RIGHT ARROW
             event.char = 'd'
           if event.keycode in [40, 104]: # DOWN ARROW
             event.char = 's'
       
    1: def _clear_keys(event=None):
           global _keysdown, _got_release, _keyswaiting
    2:     _keysdown = {}
    2:     _keyswaiting = {}
    2:     _got_release = None
       
    1: def keys_pressed(d_o_e=Tkinter.tkinter.dooneevent,
    1:                  d_w=Tkinter.tkinter.DONT_WAIT):
           d_o_e(d_w)
           if _got_release:
             d_o_e(d_w)
           return _keysdown.keys()
         
    1: def keys_waiting():
         global _keyswaiting
         keys = _keyswaiting.keys()
         _keyswaiting = {}
         return keys
       
       # Block for a list of keys...
       
    1: def wait_for_keys():
           keys = []
           while keys == []:
               keys = keys_pressed()
               sleep(0.05)
           return keys
       
       def remove_from_screen(x,
    1:                        d_o_e=Tkinter.tkinter.dooneevent,
    1:                        d_w=Tkinter.tkinter.DONT_WAIT):
   13:     _canvas.delete(x)
   13:     d_o_e(d_w)
       
    1: def _adjust_coords(coord_list, x, y):
           for i in range(0, len(coord_list), 2):
               coord_list[i] = coord_list[i] + x
               coord_list[i + 1] = coord_list[i + 1] + y
           return coord_list
       
    1: def move_to(object, x, y=None,
    1:             d_o_e=Tkinter.tkinter.dooneevent,
    1:             d_w=Tkinter.tkinter.DONT_WAIT):
  240:     if y is None:
               try: x, y = x
               except: raise  'incomprehensible coordinates' 
               
  240:     horiz = True
  240:     newCoords = []
  240:     current_x, current_y = _canvas.coords(object)[0:2] # first point
 1200:     for coord in  _canvas.coords(object):
  960:       if horiz:  
  480:         inc = x - current_x
             else:      
  480:         inc = y - current_y
  960:       horiz = not horiz
             
  960:       newCoords.append(coord + inc)
           
  240:     _canvas.coords(object, *newCoords)
  240:     d_o_e(d_w)
           
    1: def move_by(object, x, y=None,
    1:             d_o_e=Tkinter.tkinter.dooneevent,
    1:             d_w=Tkinter.tkinter.DONT_WAIT):
           if y is None:
               try: x, y = x
               except: raise Exception, 'incomprehensible coordinates' 
           
           horiz = True
           newCoords = []
           for coord in  _canvas.coords(object):
             if horiz:  
               inc = x
             else:      
               inc = y
             horiz = not horiz
             
             newCoords.append(coord + inc)
             
           _canvas.coords(object, *newCoords)
           d_o_e(d_w)
           
    1: def writePostscript(filename):
         "Writes the current canvas to a postscript file."    
         psfile = file(filename, 'w')
         psfile.write(_canvas.postscript(pageanchor='sw',
                          y='0.c', 
                          x='0.c'))
         psfile.close()
         
       ghost_shape = [                
    1:     (0, - 0.5),
    1:     (0.25, - 0.75),
    1:     (0.5, - 0.5),
    1:     (0.75, - 0.75),
    1:     (0.75, 0.5),
    1:     (0.5, 0.75),
    1:     (- 0.5, 0.75),
    1:     (- 0.75, 0.5),
    1:     (- 0.75, - 0.75),
    1:     (- 0.5, - 0.5),
    1:     (- 0.25, - 0.75)
         ]
       
    1: if __name__ == '__main__':
         begin_graphics()
         clear_screen()
         ghost_shape = [(x * 10 + 20, y * 10 + 20) for x, y in ghost_shape]
         g = polygon(ghost_shape, formatColor(1, 1, 1))
         move_to(g, (50, 50))
         circle((150, 150), 20, formatColor(0.7, 0.3, 0.0), endpoints=[15, - 15])
         sleep(2)
