       """Internationalization and localization support.
       
       This module provides internationalization (I18N) and localization (L10N)
       support for your Python programs by providing an interface to the GNU gettext
       message catalog library.
       
       I18N refers to the operation by which a program is made aware of multiple
       languages.  L10N refers to the adaptation of your program, once
       internationalized, to the local language and cultural habits.
       
    1: """
       
       # This module represents the integration of work, contributions, feedback, and
       # suggestions from the following people:
       #
       # Martin von Loewis, who wrote the initial implementation of the underlying
       # C-based libintlmodule (later renamed _gettext), along with a skeletal
       # gettext.py implementation.
       #
       # Peter Funk, who wrote fintl.py, a fairly complete wrapper around intlmodule,
       # which also included a pure-Python implementation to read .mo files if
       # intlmodule wasn't available.
       #
       # James Henstridge, who also wrote a gettext.py module, which has some
       # interesting, but currently unsupported experimental features: the notion of
       # a Catalog class and instances, and the ability to add to a catalog file via
       # a Python API.
       #
       # Barry Warsaw integrated these modules, wrote the .install() API and code,
       # and conformed all C and Python code to Python's coding standards.
       #
       # Francois Pinard and Marc-Andre Lemburg also contributed valuably to this
       # module.
       #
       # J. David Ibanez implemented plural forms. Bruno Haible fixed some bugs.
       #
       # TODO:
       # - Lazy loading of .mo files.  Currently the entire catalog is loaded into
       #   memory, but that's probably bad for large translated programs.  Instead,
       #   the lexical sort of original strings in GNU .mo files should be exploited
       #   to do binary searches and lazy initializations.  Or you might want to use
       #   the undocumented double-hash algorithm for .mo files with hash tables, but
       #   you'll need to study the GNU gettext code to do this.
       #
       # - Support Solaris .mo file formats.  Unfortunately, we've been unable to
       #   find this format documented anywhere.
       
       
    1: import locale, copy, os, re, struct, sys
    1: from errno import ENOENT
       
       
    1: __all__ = ['NullTranslations', 'GNUTranslations', 'Catalog',
    1:            'find', 'translation', 'install', 'textdomain', 'bindtextdomain',
    1:            'bind_textdomain_codeset',
    1:            'dgettext', 'dngettext', 'gettext', 'lgettext', 'ldgettext',
    1:            'ldngettext', 'lngettext', 'ngettext',
                  ]
       
    1: _default_localedir = os.path.join(sys.prefix, 'share', 'locale')
       
       
    1: def test(condition, true, false):
           """
           Implements the C expression:
       
             condition ? true : false
       
           Required to correctly interpret plural forms.
           """
           if condition:
               return true
           else:
               return false
       
       
    1: def c2py(plural):
           """Gets a C expression as used in PO files for plural forms and returns a
           Python lambda function that implements an equivalent expression.
           """
           # Security check, allow only the "n" identifier
           try:
               from cStringIO import StringIO
           except ImportError:
               from StringIO import StringIO
           import token, tokenize
           tokens = tokenize.generate_tokens(StringIO(plural).readline)
           try:
               danger = [x for x in tokens if x[0] == token.NAME and x[1] != 'n']
           except tokenize.TokenError:
               raise ValueError, \
                     'plural forms expression error, maybe unbalanced parenthesis'
           else:
               if danger:
                   raise ValueError, 'plural forms expression could be dangerous'
       
           # Replace some C operators by their Python equivalents
           plural = plural.replace('&&', ' and ')
           plural = plural.replace('||', ' or ')
       
           expr = re.compile(r'\!([^=])')
           plural = expr.sub(' not \\1', plural)
       
           # Regular expression and replacement function used to transform
           # "a?b:c" to "test(a,b,c)".
           expr = re.compile(r'(.*?)\?(.*?):(.*)')
           def repl(x):
               return "test(%s, %s, %s)" % (x.group(1), x.group(2),
                                            expr.sub(repl, x.group(3)))
       
           # Code to transform the plural expression, taking care of parentheses
           stack = ['']
           for c in plural:
               if c == '(':
                   stack.append('')
               elif c == ')':
                   if len(stack) == 1:
                       # Actually, we never reach this code, because unbalanced
                       # parentheses get caught in the security check at the
                       # beginning.
                       raise ValueError, 'unbalanced parenthesis in plural form'
                   s = expr.sub(repl, stack.pop())
                   stack[-1] += '(%s)' % s
               else:
                   stack[-1] += c
           plural = expr.sub(repl, stack.pop())
       
           return eval('lambda n: int(%s)' % plural)
       
       
       
    1: def _expand_lang(locale):
   10:     from locale import normalize
   10:     locale = normalize(locale)
   10:     COMPONENT_CODESET   = 1 << 0
   10:     COMPONENT_TERRITORY = 1 << 1
   10:     COMPONENT_MODIFIER  = 1 << 2
           # split up the locale into its base components
   10:     mask = 0
   10:     pos = locale.find('@')
   10:     if pos >= 0:
               modifier = locale[pos:]
               locale = locale[:pos]
               mask |= COMPONENT_MODIFIER
           else:
   10:         modifier = ''
   10:     pos = locale.find('.')
   10:     if pos >= 0:
    5:         codeset = locale[pos:]
    5:         locale = locale[:pos]
    5:         mask |= COMPONENT_CODESET
           else:
    5:         codeset = ''
   10:     pos = locale.find('_')
   10:     if pos >= 0:
    5:         territory = locale[pos:]
    5:         locale = locale[:pos]
    5:         mask |= COMPONENT_TERRITORY
           else:
    5:         territory = ''
   10:     language = locale
   10:     ret = []
   35:     for i in range(mask+1):
   25:         if not (i & ~mask):  # if all components for this combo exist ...
   25:             val = language
   25:             if i & COMPONENT_TERRITORY: val += territory
   25:             if i & COMPONENT_CODESET:   val += codeset
   25:             if i & COMPONENT_MODIFIER:  val += modifier
   25:             ret.append(val)
   10:     ret.reverse()
   10:     return ret
       
       
       
    2: class NullTranslations:
    1:     def __init__(self, fp=None):
               self._info = {}
               self._charset = None
               self._output_charset = None
               self._fallback = None
               if fp is not None:
                   self._parse(fp)
       
    1:     def _parse(self, fp):
               pass
       
    1:     def add_fallback(self, fallback):
               if self._fallback:
                   self._fallback.add_fallback(fallback)
               else:
                   self._fallback = fallback
       
    1:     def gettext(self, message):
               if self._fallback:
                   return self._fallback.gettext(message)
               return message
       
    1:     def lgettext(self, message):
               if self._fallback:
                   return self._fallback.lgettext(message)
               return message
       
    1:     def ngettext(self, msgid1, msgid2, n):
               if self._fallback:
                   return self._fallback.ngettext(msgid1, msgid2, n)
               if n == 1:
                   return msgid1
               else:
                   return msgid2
       
    1:     def lngettext(self, msgid1, msgid2, n):
               if self._fallback:
                   return self._fallback.lngettext(msgid1, msgid2, n)
               if n == 1:
                   return msgid1
               else:
                   return msgid2
       
    1:     def ugettext(self, message):
               if self._fallback:
                   return self._fallback.ugettext(message)
               return unicode(message)
       
    1:     def ungettext(self, msgid1, msgid2, n):
               if self._fallback:
                   return self._fallback.ungettext(msgid1, msgid2, n)
               if n == 1:
                   return unicode(msgid1)
               else:
                   return unicode(msgid2)
       
    1:     def info(self):
               return self._info
       
    1:     def charset(self):
               return self._charset
       
    1:     def output_charset(self):
               return self._output_charset
       
    1:     def set_output_charset(self, charset):
               self._output_charset = charset
       
    1:     def install(self, unicode=False, names=None):
               import __builtin__
               __builtin__.__dict__['_'] = unicode and self.ugettext or self.gettext
               if hasattr(names, "__contains__"):
                   if "gettext" in names:
                       __builtin__.__dict__['gettext'] = __builtin__.__dict__['_']
                   if "ngettext" in names:
                       __builtin__.__dict__['ngettext'] = (unicode and self.ungettext
                                                                    or self.ngettext)
                   if "lgettext" in names:
                       __builtin__.__dict__['lgettext'] = self.lgettext
                   if "lngettext" in names:
                       __builtin__.__dict__['lngettext'] = self.lngettext
       
       
    2: class GNUTranslations(NullTranslations):
           # Magic number of .mo files
    1:     LE_MAGIC = 0x950412deL
    1:     BE_MAGIC = 0xde120495L
       
    1:     def _parse(self, fp):
               """Override this method to support alternative .mo formats."""
               unpack = struct.unpack
               filename = getattr(fp, 'name', '')
               # Parse the .mo file header, which consists of 5 little endian 32
               # bit words.
               self._catalog = catalog = {}
               self.plural = lambda n: int(n != 1) # germanic plural by default
               buf = fp.read()
               buflen = len(buf)
               # Are we big endian or little endian?
               magic = unpack('<I', buf[:4])[0]
               if magic == self.LE_MAGIC:
                   version, msgcount, masteridx, transidx = unpack('<4I', buf[4:20])
                   ii = '<II'
               elif magic == self.BE_MAGIC:
                   version, msgcount, masteridx, transidx = unpack('>4I', buf[4:20])
                   ii = '>II'
               else:
                   raise IOError(0, 'Bad magic number', filename)
               # Now put all messages from the .mo file buffer into the catalog
               # dictionary.
               for i in xrange(0, msgcount):
                   mlen, moff = unpack(ii, buf[masteridx:masteridx+8])
                   mend = moff + mlen
                   tlen, toff = unpack(ii, buf[transidx:transidx+8])
                   tend = toff + tlen
                   if mend < buflen and tend < buflen:
                       msg = buf[moff:mend]
                       tmsg = buf[toff:tend]
                   else:
                       raise IOError(0, 'File is corrupt', filename)
                   # See if we're looking at GNU .mo conventions for metadata
                   if mlen == 0:
                       # Catalog description
                       lastk = None
                       for item in tmsg.splitlines():
                           item = item.strip()
                           if not item:
                               continue
                           k = v = None
                           if ':' in item:
                               k, v = item.split(':', 1)
                               k = k.strip().lower()
                               v = v.strip()
                               self._info[k] = v
                               lastk = k
                           elif lastk:
                               self._info[lastk] += '\n' + item
                           if k == 'content-type':
                               self._charset = v.split('charset=')[1]
                           elif k == 'plural-forms':
                               v = v.split(';')
                               plural = v[1].split('plural=')[1]
                               self.plural = c2py(plural)
                   # Note: we unconditionally convert both msgids and msgstrs to
                   # Unicode using the character encoding specified in the charset
                   # parameter of the Content-Type header.  The gettext documentation
                   # strongly encourages msgids to be us-ascii, but some applications
                   # require alternative encodings (e.g. Zope's ZCML and ZPT).  For
                   # traditional gettext applications, the msgid conversion will
                   # cause no problems since us-ascii should always be a subset of
                   # the charset encoding.  We may want to fall back to 8-bit msgids
                   # if the Unicode conversion fails.
                   if '\x00' in msg:
                       # Plural forms
                       msgid1, msgid2 = msg.split('\x00')
                       tmsg = tmsg.split('\x00')
                       if self._charset:
                           msgid1 = unicode(msgid1, self._charset)
                           tmsg = [unicode(x, self._charset) for x in tmsg]
                       for i in range(len(tmsg)):
                           catalog[(msgid1, i)] = tmsg[i]
                   else:
                       if self._charset:
                           msg = unicode(msg, self._charset)
                           tmsg = unicode(tmsg, self._charset)
                       catalog[msg] = tmsg
                   # advance to next entry in the seek tables
                   masteridx += 8
                   transidx += 8
       
    1:     def gettext(self, message):
               missing = object()
               tmsg = self._catalog.get(message, missing)
               if tmsg is missing:
                   if self._fallback:
                       return self._fallback.gettext(message)
                   return message
               # Encode the Unicode tmsg back to an 8-bit string, if possible
               if self._output_charset:
                   return tmsg.encode(self._output_charset)
               elif self._charset:
                   return tmsg.encode(self._charset)
               return tmsg
       
    1:     def lgettext(self, message):
               missing = object()
               tmsg = self._catalog.get(message, missing)
               if tmsg is missing:
                   if self._fallback:
                       return self._fallback.lgettext(message)
                   return message
               if self._output_charset:
                   return tmsg.encode(self._output_charset)
               return tmsg.encode(locale.getpreferredencoding())
       
    1:     def ngettext(self, msgid1, msgid2, n):
               try:
                   tmsg = self._catalog[(msgid1, self.plural(n))]
                   if self._output_charset:
                       return tmsg.encode(self._output_charset)
                   elif self._charset:
                       return tmsg.encode(self._charset)
                   return tmsg
               except KeyError:
                   if self._fallback:
                       return self._fallback.ngettext(msgid1, msgid2, n)
                   if n == 1:
                       return msgid1
                   else:
                       return msgid2
       
    1:     def lngettext(self, msgid1, msgid2, n):
               try:
                   tmsg = self._catalog[(msgid1, self.plural(n))]
                   if self._output_charset:
                       return tmsg.encode(self._output_charset)
                   return tmsg.encode(locale.getpreferredencoding())
               except KeyError:
                   if self._fallback:
                       return self._fallback.lngettext(msgid1, msgid2, n)
                   if n == 1:
                       return msgid1
                   else:
                       return msgid2
       
    1:     def ugettext(self, message):
               missing = object()
               tmsg = self._catalog.get(message, missing)
               if tmsg is missing:
                   if self._fallback:
                       return self._fallback.ugettext(message)
                   return unicode(message)
               return tmsg
       
    1:     def ungettext(self, msgid1, msgid2, n):
               try:
                   tmsg = self._catalog[(msgid1, self.plural(n))]
               except KeyError:
                   if self._fallback:
                       return self._fallback.ungettext(msgid1, msgid2, n)
                   if n == 1:
                       tmsg = unicode(msgid1)
                   else:
                       tmsg = unicode(msgid2)
               return tmsg
       
       
       # Locate a .mo file using the gettext strategy
    1: def find(domain, localedir=None, languages=None, all=0):
           # Get some reasonable defaults for arguments that were not supplied
    5:     if localedir is None:
    5:         localedir = _default_localedir
    5:     if languages is None:
    5:         languages = []
   20:         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
   20:             val = os.environ.get(envar)
   20:             if val:
    5:                 languages = val.split(':')
    5:                 break
    5:         if 'C' not in languages:
    5:             languages.append('C')
           # now normalize and expand the languages
    5:     nelangs = []
   15:     for lang in languages:
   35:         for nelang in _expand_lang(lang):
   25:             if nelang not in nelangs:
   25:                 nelangs.append(nelang)
           # select a language
    5:     if all:
    5:         result = []
           else:
               result = None
   25:     for lang in nelangs:
   25:         if lang == 'C':
    5:             break
   20:         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
   20:         if os.path.exists(mofile):
                   if all:
                       result.append(mofile)
                   else:
                       return mofile
    5:     return result
       
       
       
       # a mapping between absolute .mo file path and Translation object
    1: _translations = {}
       
    1: def translation(domain, localedir=None, languages=None,
    1:                 class_=None, fallback=False, codeset=None):
    5:     if class_ is None:
    5:         class_ = GNUTranslations
    5:     mofiles = find(domain, localedir, languages, all=1)
    5:     if not mofiles:
    5:         if fallback:
                   return NullTranslations()
    5:         raise IOError(ENOENT, 'No translation file found for domain', domain)
           # Avoid opening, reading, and parsing the .mo file after it's been done
           # once.
           result = None
           for mofile in mofiles:
               key = (class_, os.path.abspath(mofile))
               t = _translations.get(key)
               if t is None:
                   with open(mofile, 'rb') as fp:
                       t = _translations.setdefault(key, class_(fp))
               # Copy the translation object to allow setting fallbacks and
               # output charset. All other instance data is shared with the
               # cached object.
               t = copy.copy(t)
               if codeset:
                   t.set_output_charset(codeset)
               if result is None:
                   result = t
               else:
                   result.add_fallback(t)
           return result
       
       
    1: def install(domain, localedir=None, unicode=False, codeset=None, names=None):
           t = translation(domain, localedir, fallback=True, codeset=codeset)
           t.install(unicode, names)
       
       
       
       # a mapping b/w domains and locale directories
    1: _localedirs = {}
       # a mapping b/w domains and codesets
    1: _localecodesets = {}
       # current global domain, `messages' used for compatibility w/ GNU gettext
    1: _current_domain = 'messages'
       
       
    1: def textdomain(domain=None):
           global _current_domain
           if domain is not None:
               _current_domain = domain
           return _current_domain
       
       
    1: def bindtextdomain(domain, localedir=None):
           global _localedirs
           if localedir is not None:
               _localedirs[domain] = localedir
           return _localedirs.get(domain, _default_localedir)
       
       
    1: def bind_textdomain_codeset(domain, codeset=None):
           global _localecodesets
           if codeset is not None:
               _localecodesets[domain] = codeset
           return _localecodesets.get(domain)
       
       
    1: def dgettext(domain, message):
    5:     try:
    5:         t = translation(domain, _localedirs.get(domain, None),
    5:                         codeset=_localecodesets.get(domain))
    5:     except IOError:
    5:         return message
           return t.gettext(message)
       
    1: def ldgettext(domain, message):
           try:
               t = translation(domain, _localedirs.get(domain, None),
                               codeset=_localecodesets.get(domain))
           except IOError:
               return message
           return t.lgettext(message)
       
    1: def dngettext(domain, msgid1, msgid2, n):
           try:
               t = translation(domain, _localedirs.get(domain, None),
                               codeset=_localecodesets.get(domain))
           except IOError:
               if n == 1:
                   return msgid1
               else:
                   return msgid2
           return t.ngettext(msgid1, msgid2, n)
       
    1: def ldngettext(domain, msgid1, msgid2, n):
           try:
               t = translation(domain, _localedirs.get(domain, None),
                               codeset=_localecodesets.get(domain))
           except IOError:
               if n == 1:
                   return msgid1
               else:
                   return msgid2
           return t.lngettext(msgid1, msgid2, n)
       
    1: def gettext(message):
    5:     return dgettext(_current_domain, message)
       
    1: def lgettext(message):
           return ldgettext(_current_domain, message)
       
    1: def ngettext(msgid1, msgid2, n):
           return dngettext(_current_domain, msgid1, msgid2, n)
       
    1: def lngettext(msgid1, msgid2, n):
           return ldngettext(_current_domain, msgid1, msgid2, n)
       
       # dcgettext() has been deemed unnecessary and is not implemented.
       
       # James Henstridge's Catalog constructor from GNOME gettext.  Documented usage
       # was:
       #
       #    import gettext
       #    cat = gettext.Catalog(PACKAGE, localedir=LOCALEDIR)
       #    _ = cat.gettext
       #    print _('Hello World')
       
       # The resulting catalog object currently don't support access through a
       # dictionary API, which was supported (but apparently unused) in GNOME
       # gettext.
       
    1: Catalog = translation
