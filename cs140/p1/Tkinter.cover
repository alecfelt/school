       """Wrapper functions for Tcl/Tk.
       
       Tkinter provides classes which allow the display, positioning and
       control of widgets. Toplevel widgets are Tk and Toplevel. Other
       widgets are Frame, Label, Entry, Text, Canvas, Button, Radiobutton,
       Checkbutton, Scale, Listbox, Scrollbar, OptionMenu, Spinbox
       LabelFrame and PanedWindow.
       
       Properties of the widgets are specified with keyword arguments.
       Keyword arguments have the same name as the corresponding resource
       under Tk.
       
       Widgets are positioned with one of the geometry managers Place, Pack
       or Grid. These managers can be called with methods place, pack, grid
       available in every Widget.
       
       Actions are bound to events by resources (e.g. keyword argument
       command) or with the method bind.
       
       Example (Hello, World):
       import Tkinter
       from Tkconstants import *
       tk = Tkinter.Tk()
       frame = Tkinter.Frame(tk, relief=RIDGE, borderwidth=2)
       frame.pack(fill=BOTH,expand=1)
       label = Tkinter.Label(frame, text="Hello, World")
       label.pack(fill=X, expand=1)
       button = Tkinter.Button(frame,text="Exit",command=tk.destroy)
       button.pack(side=BOTTOM)
       tk.mainloop()
    1: """
       
    1: __version__ = "$Revision: 81008 $"
       
    1: import sys
    1: if sys.platform == "win32":
           # Attempt to configure Tcl/Tk without requiring PATH
           import FixTk
    1: import _tkinter # If this fails your Python may not be configured for Tk
    1: tkinter = _tkinter # b/w compat for export
    1: TclError = _tkinter.TclError
    1: from types import *
    1: from Tkconstants import *
    1: import re
       
    1: wantobjects = 1
       
    1: TkVersion = float(_tkinter.TK_VERSION)
    1: TclVersion = float(_tkinter.TCL_VERSION)
       
    1: READABLE = _tkinter.READABLE
    1: WRITABLE = _tkinter.WRITABLE
    1: EXCEPTION = _tkinter.EXCEPTION
       
       # These are not always defined, e.g. not on Win32 with Tk 8.0 :-(
    1: try: _tkinter.createfilehandler
       except AttributeError: _tkinter.createfilehandler = None
    1: try: _tkinter.deletefilehandler
       except AttributeError: _tkinter.deletefilehandler = None
       
       
    1: _magic_re = re.compile(r'([\\{}])')
    1: _space_re = re.compile(r'([\s])')
       
    1: def _join(value):
           """Internal function."""
           return ' '.join(map(_stringify, value))
       
    1: def _stringify(value):
           """Internal function."""
    3:     if isinstance(value, (list, tuple)):
               if len(value) == 1:
                   value = _stringify(value[0])
                   if value[0] == '{':
                       value = '{%s}' % value
               else:
                   value = '{%s}' % _join(value)
           else:
    3:         if isinstance(value, str):
    3:             value = unicode(value, 'utf-8')
               elif not isinstance(value, unicode):
                   value = str(value)
    3:         if not value:
                   value = '{}'
    3:         elif _magic_re.search(value):
                   # add '\' before special characters and spaces
                   value = _magic_re.sub(r'\\\1', value)
                   value = _space_re.sub(r'\\\1', value)
    3:         elif value[0] == '"' or _space_re.search(value):
                   value = '{%s}' % value
    3:     return value
       
    1: def _flatten(tuple):
           """Internal function."""
           res = ()
           for item in tuple:
               if type(item) in (TupleType, ListType):
                   res = res + _flatten(item)
               elif item is not None:
                   res = res + (item,)
           return res
       
    1: try: _flatten = _tkinter._flatten
       except AttributeError: pass
       
    1: def _cnfmerge(cnfs):
           """Internal function."""
  959:     if type(cnfs) is DictionaryType:
  302:         return cnfs
  657:     elif type(cnfs) in (NoneType, StringType):
               return cnfs
           else:
  657:         cnf = {}
 1671:         for c in _flatten(cnfs):
 1014:             try:
 1014:                 cnf.update(c)
                   except (AttributeError, TypeError), msg:
                       print "_cnfmerge: fallback due to:", msg
                       for k, v in c.items():
                           cnf[k] = v
  657:         return cnf
       
    1: try: _cnfmerge = _tkinter._cnfmerge
    1: except AttributeError: pass
       
    1: def _splitdict(tk, v, cut_minus=True, conv=None):
           """Return a properly formatted dict built from Tcl list pairs.
       
           If cut_minus is True, the supposed '-' prefix will be removed from
           keys. If conv is specified, it is used to convert values.
       
           Tcl list is expected to contain an even number of elements.
           """
           t = tk.splitlist(v)
           if len(t) % 2:
               raise RuntimeError('Tcl list representing a dict is expected '
                                  'to contain an even number of elements')
           it = iter(t)
           dict = {}
           for key, value in zip(it, it):
               key = str(key)
               if cut_minus and key[0] == '-':
                   key = key[1:]
               if conv:
                   value = conv(value)
               dict[key] = value
           return dict
       
    2: class Event:
           """Container for the properties of an event.
       
           Instances of this type are generated if one of the following events occurs:
       
           KeyPress, KeyRelease - for keyboard events
           ButtonPress, ButtonRelease, Motion, Enter, Leave, MouseWheel - for mouse events
           Visibility, Unmap, Map, Expose, FocusIn, FocusOut, Circulate,
           Colormap, Gravity, Reparent, Property, Destroy, Activate,
           Deactivate - for window events.
       
           If a callback function for one of these events is registered
           using bind, bind_all, bind_class, or tag_bind, the callback is
           called with an Event as first argument. It will have the
           following attributes (in braces are the event types for which
           the attribute is valid):
       
               serial - serial number of event
           num - mouse button pressed (ButtonPress, ButtonRelease)
           focus - whether the window has the focus (Enter, Leave)
           height - height of the exposed window (Configure, Expose)
           width - width of the exposed window (Configure, Expose)
           keycode - keycode of the pressed key (KeyPress, KeyRelease)
           state - state of the event as a number (ButtonPress, ButtonRelease,
                                   Enter, KeyPress, KeyRelease,
                                   Leave, Motion)
           state - state as a string (Visibility)
           time - when the event occurred
           x - x-position of the mouse
           y - y-position of the mouse
           x_root - x-position of the mouse on the screen
                    (ButtonPress, ButtonRelease, KeyPress, KeyRelease, Motion)
           y_root - y-position of the mouse on the screen
                    (ButtonPress, ButtonRelease, KeyPress, KeyRelease, Motion)
           char - pressed character (KeyPress, KeyRelease)
           send_event - see X/Windows documentation
           keysym - keysym of the event as a string (KeyPress, KeyRelease)
           keysym_num - keysym of the event as a number (KeyPress, KeyRelease)
           type - type of the event as a number
           widget - widget in which the event occurred
           delta - delta of wheel movement (MouseWheel)
    1:     """
    1:     pass
       
    1: _support_default_root = 1
    1: _default_root = None
       
    1: def NoDefaultRoot():
           """Inhibit setting of default root window.
       
           Call this function to inhibit that the first instance of
           Tk is used for windows without an explicit parent window.
           """
           global _support_default_root
           _support_default_root = 0
           global _default_root
           _default_root = None
           del _default_root
       
    1: def _tkerror(err):
           """Internal function."""
           pass
       
    1: def _exit(code=0):
           """Internal function. Calling it will raise the exception SystemExit."""
           try:
               code = int(code)
           except ValueError:
               pass
           raise SystemExit, code
       
    1: _varnum = 0
    2: class Variable:
           """Class to define value holders for e.g. buttons.
       
           Subclasses StringVar, IntVar, DoubleVar, BooleanVar are specializations
    1:     that constrain the type of the value returned from get()."""
    1:     _default = ""
    1:     _tclCommands = None
    1:     def __init__(self, master=None, value=None, name=None):
               """Construct a variable
       
               MASTER can be given as master widget.
               VALUE is an optional value (defaults to "")
               NAME is an optional Tcl name (defaults to PY_VARnum).
       
               If NAME matches an existing variable and VALUE is omitted
               then the existing value is retained.
               """
               global _varnum
               if not master:
                   master = _default_root
               self._root = master._root()
               self._tk = master.tk
               if name:
                   self._name = name
               else:
                   self._name = 'PY_VAR' + repr(_varnum)
                   _varnum += 1
               if value is not None:
                   self.set(value)
               elif not self._tk.getboolean(self._tk.call("info", "exists", self._name)):
                   self.set(self._default)
    1:     def __del__(self):
               """Unset the variable in Tcl."""
               if self._tk is None:
                   return
               if self._tk.getboolean(self._tk.call("info", "exists", self._name)):
                   self._tk.globalunsetvar(self._name)
               if self._tclCommands is not None:
                   for name in self._tclCommands:
                       #print '- Tkinter: deleted command', name
                       self._tk.deletecommand(name)
                   self._tclCommands = None
    1:     def __str__(self):
               """Return the name of the variable in Tcl."""
               return self._name
    1:     def set(self, value):
               """Set the variable to VALUE."""
               return self._tk.globalsetvar(self._name, value)
    1:     def get(self):
               """Return value of variable."""
               return self._tk.globalgetvar(self._name)
    1:     def trace_variable(self, mode, callback):
               """Define a trace callback for the variable.
       
               MODE is one of "r", "w", "u" for read, write, undefine.
               CALLBACK must be a function which is called when
               the variable is read, written or undefined.
       
               Return the name of the callback.
               """
               f = CallWrapper(callback, None, self._root).__call__
               cbname = repr(id(f))
               try:
                   callback = callback.im_func
               except AttributeError:
                   pass
               try:
                   cbname = cbname + callback.__name__
               except AttributeError:
                   pass
               self._tk.createcommand(cbname, f)
               if self._tclCommands is None:
                   self._tclCommands = []
               self._tclCommands.append(cbname)
               self._tk.call("trace", "variable", self._name, mode, cbname)
               return cbname
    1:     trace = trace_variable
    1:     def trace_vdelete(self, mode, cbname):
               """Delete the trace callback for a variable.
       
               MODE is one of "r", "w", "u" for read, write, undefine.
               CBNAME is the name of the callback returned from trace_variable or trace.
               """
               self._tk.call("trace", "vdelete", self._name, mode, cbname)
               self._tk.deletecommand(cbname)
               try:
                   self._tclCommands.remove(cbname)
               except ValueError:
                   pass
    1:     def trace_vinfo(self):
               """Return all trace callback information."""
               return map(self._tk.split, self._tk.splitlist(
                   self._tk.call("trace", "vinfo", self._name)))
    1:     def __eq__(self, other):
               """Comparison for equality (==).
       
               Note: if the Variable's master matters to behavior
               also compare self._master == other._master
               """
               return self.__class__.__name__ == other.__class__.__name__ \
                   and self._name == other._name
       
    2: class StringVar(Variable):
    1:     """Value holder for strings variables."""
    1:     _default = ""
    1:     def __init__(self, master=None, value=None, name=None):
               """Construct a string variable.
       
               MASTER can be given as master widget.
               VALUE is an optional value (defaults to "")
               NAME is an optional Tcl name (defaults to PY_VARnum).
       
               If NAME matches an existing variable and VALUE is omitted
               then the existing value is retained.
               """
               Variable.__init__(self, master, value, name)
       
    1:     def get(self):
               """Return value of variable as string."""
               value = self._tk.globalgetvar(self._name)
               if isinstance(value, basestring):
                   return value
               return str(value)
       
    2: class IntVar(Variable):
    1:     """Value holder for integer variables."""
    1:     _default = 0
    1:     def __init__(self, master=None, value=None, name=None):
               """Construct an integer variable.
       
               MASTER can be given as master widget.
               VALUE is an optional value (defaults to 0)
               NAME is an optional Tcl name (defaults to PY_VARnum).
       
               If NAME matches an existing variable and VALUE is omitted
               then the existing value is retained.
               """
               Variable.__init__(self, master, value, name)
       
    1:     def set(self, value):
               """Set the variable to value, converting booleans to integers."""
               if isinstance(value, bool):
                   value = int(value)
               return Variable.set(self, value)
       
    1:     def get(self):
               """Return the value of the variable as an integer."""
               return getint(self._tk.globalgetvar(self._name))
       
    2: class DoubleVar(Variable):
    1:     """Value holder for float variables."""
    1:     _default = 0.0
    1:     def __init__(self, master=None, value=None, name=None):
               """Construct a float variable.
       
               MASTER can be given as master widget.
               VALUE is an optional value (defaults to 0.0)
               NAME is an optional Tcl name (defaults to PY_VARnum).
       
               If NAME matches an existing variable and VALUE is omitted
               then the existing value is retained.
               """
               Variable.__init__(self, master, value, name)
       
    1:     def get(self):
               """Return the value of the variable as a float."""
               return getdouble(self._tk.globalgetvar(self._name))
       
    2: class BooleanVar(Variable):
    1:     """Value holder for boolean variables."""
    1:     _default = False
    1:     def __init__(self, master=None, value=None, name=None):
               """Construct a boolean variable.
       
               MASTER can be given as master widget.
               VALUE is an optional value (defaults to False)
               NAME is an optional Tcl name (defaults to PY_VARnum).
       
               If NAME matches an existing variable and VALUE is omitted
               then the existing value is retained.
               """
               Variable.__init__(self, master, value, name)
       
    1:     def set(self, value):
               """Set the variable to VALUE."""
               return self._tk.globalsetvar(self._name, self._tk.getboolean(value))
       
    1:     def get(self):
               """Return the value of the variable as a bool."""
               return self._tk.getboolean(self._tk.globalgetvar(self._name))
       
    1: def mainloop(n=0):
           """Run the main loop of Tcl."""
           _default_root.tk.mainloop(n)
       
    1: getint = int
       
    1: getdouble = float
       
    1: def getboolean(s):
           """Convert true and false to integer values 1 and 0."""
           return _default_root.tk.getboolean(s)
       
       # Methods defined on both toplevel and interior widgets
    2: class Misc:
           """Internal class.
       
    1:     Base class which defines methods common for interior widgets."""
       
           # XXX font command?
    1:     _tclCommands = None
    1:     def destroy(self):
               """Internal function.
       
               Delete all Tcl commands created for
               this widget in the Tcl interpreter."""
    2:         if self._tclCommands is not None:
   14:             for name in self._tclCommands:
                       #print '- Tkinter: deleted command', name
   12:                 self.tk.deletecommand(name)
    2:             self._tclCommands = None
    1:     def deletecommand(self, name):
               """Internal function.
       
               Delete the Tcl command provided in NAME."""
               #print '- Tkinter: deleted command', name
  241:         self.tk.deletecommand(name)
  241:         try:
  241:             self._tclCommands.remove(name)
               except ValueError:
                   pass
    1:     def tk_strictMotif(self, boolean=None):
               """Set Tcl internal variable, whether the look and feel
               should adhere to Motif.
       
               A parameter of 1 means adhere to Motif (e.g. no color
               change if mouse passes over slider).
               Returns the set value."""
               return self.tk.getboolean(self.tk.call(
                   'set', 'tk_strictMotif', boolean))
    1:     def tk_bisque(self):
               """Change the color scheme to light brown as used in Tk 3.6 and before."""
               self.tk.call('tk_bisque')
    1:     def tk_setPalette(self, *args, **kw):
               """Set a new color scheme for all widget elements.
       
               A single color as argument will cause that all colors of Tk
               widget elements are derived from this.
               Alternatively several keyword parameters and its associated
               colors can be given. The following keywords are valid:
               activeBackground, foreground, selectColor,
               activeForeground, highlightBackground, selectBackground,
               background, highlightColor, selectForeground,
               disabledForeground, insertBackground, troughColor."""
               self.tk.call(('tk_setPalette',)
                     + _flatten(args) + _flatten(kw.items()))
    1:     def tk_menuBar(self, *args):
               """Do not use. Needed in Tk 3.6 and earlier."""
               # obsolete since Tk 4.0
               import warnings
               warnings.warn('tk_menuBar() does nothing and will be removed in 3.6',
                             DeprecationWarning, stacklevel=2)
    1:     def wait_variable(self, name='PY_VAR'):
               """Wait until the variable is modified.
       
               A parameter of type IntVar, StringVar, DoubleVar or
               BooleanVar must be given."""
               self.tk.call('tkwait', 'variable', name)
    1:     waitvar = wait_variable # XXX b/w compat
    1:     def wait_window(self, window=None):
               """Wait until a WIDGET is destroyed.
       
               If no parameter is given self is used."""
               if window is None:
                   window = self
               self.tk.call('tkwait', 'window', window._w)
    1:     def wait_visibility(self, window=None):
               """Wait until the visibility of a WIDGET changes
               (e.g. it appears).
       
               If no parameter is given self is used."""
               if window is None:
                   window = self
               self.tk.call('tkwait', 'visibility', window._w)
    1:     def setvar(self, name='PY_VAR', value='1'):
               """Set Tcl variable NAME to VALUE."""
               self.tk.setvar(name, value)
    1:     def getvar(self, name='PY_VAR'):
               """Return value of Tcl variable NAME."""
               return self.tk.getvar(name)
    1:     getint = int
    1:     getdouble = float
    1:     def getboolean(self, s):
               """Return a boolean value for Tcl boolean values true and false given as parameter."""
               return self.tk.getboolean(s)
    1:     def focus_set(self):
               """Direct input focus to this widget.
       
               If the application currently does not have the focus
               this widget will get the focus if the application gets
               the focus through the window manager."""
               self.tk.call('focus', self._w)
    1:     focus = focus_set # XXX b/w compat?
    1:     def focus_force(self):
               """Direct input focus to this widget even if the
               application does not have the focus. Use with
               caution!"""
               self.tk.call('focus', '-force', self._w)
    1:     def focus_get(self):
               """Return the widget which has currently the focus in the
               application.
       
               Use focus_displayof to allow working with several
               displays. Return None if application does not have
               the focus."""
               name = self.tk.call('focus')
               if name == 'none' or not name: return None
               return self._nametowidget(name)
    1:     def focus_displayof(self):
               """Return the widget which has currently the focus on the
               display where this widget is located.
       
               Return None if the application does not have the focus."""
               name = self.tk.call('focus', '-displayof', self._w)
               if name == 'none' or not name: return None
               return self._nametowidget(name)
    1:     def focus_lastfor(self):
               """Return the widget which would have the focus if top level
               for this widget gets the focus from the window manager."""
               name = self.tk.call('focus', '-lastfor', self._w)
               if name == 'none' or not name: return None
               return self._nametowidget(name)
    1:     def tk_focusFollowsMouse(self):
               """The widget under mouse will get automatically focus. Can not
               be disabled easily."""
               self.tk.call('tk_focusFollowsMouse')
    1:     def tk_focusNext(self):
               """Return the next widget in the focus order which follows
               widget which has currently the focus.
       
               The focus order first goes to the next child, then to
               the children of the child recursively and then to the
               next sibling which is higher in the stacking order.  A
               widget is omitted if it has the takefocus resource set
               to 0."""
               name = self.tk.call('tk_focusNext', self._w)
               if not name: return None
               return self._nametowidget(name)
    1:     def tk_focusPrev(self):
               """Return previous widget in the focus order. See tk_focusNext for details."""
               name = self.tk.call('tk_focusPrev', self._w)
               if not name: return None
               return self._nametowidget(name)
    1:     def after(self, ms, func=None, *args):
               """Call function once after given time.
       
               MS specifies the time in milliseconds. FUNC gives the
               function which shall be called. Additional parameters
               are given as parameters to the function call.  Return
               identifier to cancel scheduling with after_cancel."""
  241:         if not func:
                   # I'd rather use time.sleep(ms*0.001)
                   self.tk.call('after', ms)
               else:
  241:             def callit():
  241:                 try:
  241:                     func(*args)
                       finally:
  241:                     try:
  241:                         self.deletecommand(name)
                           except TclError:
                               pass
  241:             callit.__name__ = func.__name__
  241:             name = self._register(callit)
  241:             return self.tk.call('after', ms, name)
    1:     def after_idle(self, func, *args):
               """Call FUNC once if the Tcl main loop has no event to
               process.
       
               Return an identifier to cancel the scheduling with
               after_cancel."""
               return self.after('idle', func, *args)
    1:     def after_cancel(self, id):
               """Cancel scheduling of function identified with ID.
       
               Identifier returned by after or after_idle must be
               given as first parameter."""
               try:
                   data = self.tk.call('after', 'info', id)
                   # In Tk 8.3, splitlist returns: (script, type)
                   # In Tk 8.4, splitlist may return (script, type) or (script,)
                   script = self.tk.splitlist(data)[0]
                   self.deletecommand(script)
               except TclError:
                   pass
               self.tk.call('after', 'cancel', id)
    1:     def bell(self, displayof=0):
               """Ring a display's bell."""
               self.tk.call(('bell',) + self._displayof(displayof))
       
           # Clipboard handling:
    1:     def clipboard_get(self, **kw):
               """Retrieve data from the clipboard on window's display.
       
               The window keyword defaults to the root window of the Tkinter
               application.
       
               The type keyword specifies the form in which the data is
               to be returned and should be an atom name such as STRING
               or FILE_NAME.  Type defaults to STRING, except on X11, where the default
               is to try UTF8_STRING and fall back to STRING.
       
               This command is equivalent to:
       
               selection_get(CLIPBOARD)
               """
               if 'type' not in kw and self._windowingsystem == 'x11':
                   try:
                       kw['type'] = 'UTF8_STRING'
                       return self.tk.call(('clipboard', 'get') + self._options(kw))
                   except TclError:
                       del kw['type']
               return self.tk.call(('clipboard', 'get') + self._options(kw))
       
    1:     def clipboard_clear(self, **kw):
               """Clear the data in the Tk clipboard.
       
               A widget specified for the optional displayof keyword
               argument specifies the target display."""
               if 'displayof' not in kw: kw['displayof'] = self._w
               self.tk.call(('clipboard', 'clear') + self._options(kw))
    1:     def clipboard_append(self, string, **kw):
               """Append STRING to the Tk clipboard.
       
               A widget specified at the optional displayof keyword
               argument specifies the target display. The clipboard
               can be retrieved with selection_get."""
               if 'displayof' not in kw: kw['displayof'] = self._w
               self.tk.call(('clipboard', 'append') + self._options(kw)
                     + ('--', string))
           # XXX grab current w/o window argument
    1:     def grab_current(self):
               """Return widget which has currently the grab in this application
               or None."""
               name = self.tk.call('grab', 'current', self._w)
               if not name: return None
               return self._nametowidget(name)
    1:     def grab_release(self):
               """Release grab for this widget if currently set."""
               self.tk.call('grab', 'release', self._w)
    1:     def grab_set(self):
               """Set grab for this widget.
       
               A grab directs all events to this and descendant
               widgets in the application."""
               self.tk.call('grab', 'set', self._w)
    1:     def grab_set_global(self):
               """Set global grab for this widget.
       
               A global grab directs all events to this and
               descendant widgets on the display. Use with caution -
               other applications do not get events anymore."""
               self.tk.call('grab', 'set', '-global', self._w)
    1:     def grab_status(self):
               """Return None, "local" or "global" if this widget has
               no, a local or a global grab."""
               status = self.tk.call('grab', 'status', self._w)
               if status == 'none': status = None
               return status
    1:     def option_add(self, pattern, value, priority = None):
               """Set a VALUE (second parameter) for an option
               PATTERN (first parameter).
       
               An optional third parameter gives the numeric priority
               (defaults to 80)."""
               self.tk.call('option', 'add', pattern, value, priority)
    1:     def option_clear(self):
               """Clear the option database.
       
               It will be reloaded if option_add is called."""
               self.tk.call('option', 'clear')
    1:     def option_get(self, name, className):
               """Return the value for an option NAME for this widget
               with CLASSNAME.
       
               Values with higher priority override lower values."""
               return self.tk.call('option', 'get', self._w, name, className)
    1:     def option_readfile(self, fileName, priority = None):
               """Read file FILENAME into the option database.
       
               An optional second parameter gives the numeric
               priority."""
               self.tk.call('option', 'readfile', fileName, priority)
    1:     def selection_clear(self, **kw):
               """Clear the current X selection."""
               if 'displayof' not in kw: kw['displayof'] = self._w
               self.tk.call(('selection', 'clear') + self._options(kw))
    1:     def selection_get(self, **kw):
               """Return the contents of the current X selection.
       
               A keyword parameter selection specifies the name of
               the selection and defaults to PRIMARY.  A keyword
               parameter displayof specifies a widget on the display
               to use. A keyword parameter type specifies the form of data to be
               fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
               before STRING."""
               if 'displayof' not in kw: kw['displayof'] = self._w
               if 'type' not in kw and self._windowingsystem == 'x11':
                   try:
                       kw['type'] = 'UTF8_STRING'
                       return self.tk.call(('selection', 'get') + self._options(kw))
                   except TclError:
                       del kw['type']
               return self.tk.call(('selection', 'get') + self._options(kw))
    1:     def selection_handle(self, command, **kw):
               """Specify a function COMMAND to call if the X
               selection owned by this widget is queried by another
               application.
       
               This function must return the contents of the
               selection. The function will be called with the
               arguments OFFSET and LENGTH which allows the chunking
               of very long selections. The following keyword
               parameters can be provided:
               selection - name of the selection (default PRIMARY),
               type - type of the selection (e.g. STRING, FILE_NAME)."""
               name = self._register(command)
               self.tk.call(('selection', 'handle') + self._options(kw)
                     + (self._w, name))
    1:     def selection_own(self, **kw):
               """Become owner of X selection.
       
               A keyword parameter selection specifies the name of
               the selection (default PRIMARY)."""
               self.tk.call(('selection', 'own') +
                        self._options(kw) + (self._w,))
    1:     def selection_own_get(self, **kw):
               """Return owner of X selection.
       
               The following keyword parameter can
               be provided:
               selection - name of the selection (default PRIMARY),
               type - type of the selection (e.g. STRING, FILE_NAME)."""
               if 'displayof' not in kw: kw['displayof'] = self._w
               name = self.tk.call(('selection', 'own') + self._options(kw))
               if not name: return None
               return self._nametowidget(name)
    1:     def send(self, interp, cmd, *args):
               """Send Tcl command CMD to different interpreter INTERP to be executed."""
               return self.tk.call(('send', interp, cmd) + args)
    1:     def lower(self, belowThis=None):
               """Lower this widget in the stacking order."""
               self.tk.call('lower', self._w, belowThis)
    1:     def tkraise(self, aboveThis=None):
               """Raise this widget in the stacking order."""
               self.tk.call('raise', self._w, aboveThis)
    1:     lift = tkraise
    1:     def colormodel(self, value=None):
               """Useless. Not implemented in Tk."""
               return self.tk.call('tk', 'colormodel', self._w, value)
    1:     def winfo_atom(self, name, displayof=0):
               """Return integer which represents atom NAME."""
               args = ('winfo', 'atom') + self._displayof(displayof) + (name,)
               return getint(self.tk.call(args))
    1:     def winfo_atomname(self, id, displayof=0):
               """Return name of atom with identifier ID."""
               args = ('winfo', 'atomname') \
                      + self._displayof(displayof) + (id,)
               return self.tk.call(args)
    1:     def winfo_cells(self):
               """Return number of cells in the colormap for this widget."""
               return getint(
                   self.tk.call('winfo', 'cells', self._w))
    1:     def winfo_children(self):
               """Return a list of all widgets which are children of this widget."""
               result = []
               for child in self.tk.splitlist(
                   self.tk.call('winfo', 'children', self._w)):
                   try:
                       # Tcl sometimes returns extra windows, e.g. for
                       # menus; those need to be skipped
                       result.append(self._nametowidget(child))
                   except KeyError:
                       pass
               return result
       
    1:     def winfo_class(self):
               """Return window class name of this widget."""
               return self.tk.call('winfo', 'class', self._w)
    1:     def winfo_colormapfull(self):
               """Return true if at the last color request the colormap was full."""
               return self.tk.getboolean(
                   self.tk.call('winfo', 'colormapfull', self._w))
    1:     def winfo_containing(self, rootX, rootY, displayof=0):
               """Return the widget which is at the root coordinates ROOTX, ROOTY."""
               args = ('winfo', 'containing') \
                      + self._displayof(displayof) + (rootX, rootY)
               name = self.tk.call(args)
               if not name: return None
               return self._nametowidget(name)
    1:     def winfo_depth(self):
               """Return the number of bits per pixel."""
               return getint(self.tk.call('winfo', 'depth', self._w))
    1:     def winfo_exists(self):
               """Return true if this widget exists."""
               return getint(
                   self.tk.call('winfo', 'exists', self._w))
    1:     def winfo_fpixels(self, number):
               """Return the number of pixels for the given distance NUMBER
               (e.g. "3c") as float."""
               return getdouble(self.tk.call(
                   'winfo', 'fpixels', self._w, number))
    1:     def winfo_geometry(self):
               """Return geometry string for this widget in the form "widthxheight+X+Y"."""
               return self.tk.call('winfo', 'geometry', self._w)
    1:     def winfo_height(self):
               """Return height of this widget."""
               return getint(
                   self.tk.call('winfo', 'height', self._w))
    1:     def winfo_id(self):
               """Return identifier ID for this widget."""
               return self.tk.getint(
                   self.tk.call('winfo', 'id', self._w))
    1:     def winfo_interps(self, displayof=0):
               """Return the name of all Tcl interpreters for this display."""
               args = ('winfo', 'interps') + self._displayof(displayof)
               return self.tk.splitlist(self.tk.call(args))
    1:     def winfo_ismapped(self):
               """Return true if this widget is mapped."""
               return getint(
                   self.tk.call('winfo', 'ismapped', self._w))
    1:     def winfo_manager(self):
               """Return the window mananger name for this widget."""
               return self.tk.call('winfo', 'manager', self._w)
    1:     def winfo_name(self):
               """Return the name of this widget."""
               return self.tk.call('winfo', 'name', self._w)
    1:     def winfo_parent(self):
               """Return the name of the parent of this widget."""
               return self.tk.call('winfo', 'parent', self._w)
    1:     def winfo_pathname(self, id, displayof=0):
               """Return the pathname of the widget given by ID."""
               args = ('winfo', 'pathname') \
                      + self._displayof(displayof) + (id,)
               return self.tk.call(args)
    1:     def winfo_pixels(self, number):
               """Rounded integer value of winfo_fpixels."""
               return getint(
                   self.tk.call('winfo', 'pixels', self._w, number))
    1:     def winfo_pointerx(self):
               """Return the x coordinate of the pointer on the root window."""
               return getint(
                   self.tk.call('winfo', 'pointerx', self._w))
    1:     def winfo_pointerxy(self):
               """Return a tuple of x and y coordinates of the pointer on the root window."""
               return self._getints(
                   self.tk.call('winfo', 'pointerxy', self._w))
    1:     def winfo_pointery(self):
               """Return the y coordinate of the pointer on the root window."""
               return getint(
                   self.tk.call('winfo', 'pointery', self._w))
    1:     def winfo_reqheight(self):
               """Return requested height of this widget."""
               return getint(
                   self.tk.call('winfo', 'reqheight', self._w))
    1:     def winfo_reqwidth(self):
               """Return requested width of this widget."""
               return getint(
                   self.tk.call('winfo', 'reqwidth', self._w))
    1:     def winfo_rgb(self, color):
               """Return tuple of decimal values for red, green, blue for
               COLOR in this widget."""
               return self._getints(
                   self.tk.call('winfo', 'rgb', self._w, color))
    1:     def winfo_rootx(self):
               """Return x coordinate of upper left corner of this widget on the
               root window."""
               return getint(
                   self.tk.call('winfo', 'rootx', self._w))
    1:     def winfo_rooty(self):
               """Return y coordinate of upper left corner of this widget on the
               root window."""
               return getint(
                   self.tk.call('winfo', 'rooty', self._w))
    1:     def winfo_screen(self):
               """Return the screen name of this widget."""
               return self.tk.call('winfo', 'screen', self._w)
    1:     def winfo_screencells(self):
               """Return the number of the cells in the colormap of the screen
               of this widget."""
               return getint(
                   self.tk.call('winfo', 'screencells', self._w))
    1:     def winfo_screendepth(self):
               """Return the number of bits per pixel of the root window of the
               screen of this widget."""
               return getint(
                   self.tk.call('winfo', 'screendepth', self._w))
    1:     def winfo_screenheight(self):
               """Return the number of pixels of the height of the screen of this widget
               in pixel."""
               return getint(
                   self.tk.call('winfo', 'screenheight', self._w))
    1:     def winfo_screenmmheight(self):
               """Return the number of pixels of the height of the screen of
               this widget in mm."""
               return getint(
                   self.tk.call('winfo', 'screenmmheight', self._w))
    1:     def winfo_screenmmwidth(self):
               """Return the number of pixels of the width of the screen of
               this widget in mm."""
               return getint(
                   self.tk.call('winfo', 'screenmmwidth', self._w))
    1:     def winfo_screenvisual(self):
               """Return one of the strings directcolor, grayscale, pseudocolor,
               staticcolor, staticgray, or truecolor for the default
               colormodel of this screen."""
               return self.tk.call('winfo', 'screenvisual', self._w)
    1:     def winfo_screenwidth(self):
               """Return the number of pixels of the width of the screen of
               this widget in pixel."""
               return getint(
                   self.tk.call('winfo', 'screenwidth', self._w))
    1:     def winfo_server(self):
               """Return information of the X-Server of the screen of this widget in
               the form "XmajorRminor vendor vendorVersion"."""
               return self.tk.call('winfo', 'server', self._w)
    1:     def winfo_toplevel(self):
               """Return the toplevel widget of this widget."""
               return self._nametowidget(self.tk.call(
                   'winfo', 'toplevel', self._w))
    1:     def winfo_viewable(self):
               """Return true if the widget and all its higher ancestors are mapped."""
               return getint(
                   self.tk.call('winfo', 'viewable', self._w))
    1:     def winfo_visual(self):
               """Return one of the strings directcolor, grayscale, pseudocolor,
               staticcolor, staticgray, or truecolor for the
               colormodel of this widget."""
               return self.tk.call('winfo', 'visual', self._w)
    1:     def winfo_visualid(self):
               """Return the X identifier for the visual for this widget."""
               return self.tk.call('winfo', 'visualid', self._w)
    1:     def winfo_visualsavailable(self, includeids=0):
               """Return a list of all visuals available for the screen
               of this widget.
       
               Each item in the list consists of a visual name (see winfo_visual), a
               depth and if INCLUDEIDS=1 is given also the X identifier."""
               data = self.tk.split(
                   self.tk.call('winfo', 'visualsavailable', self._w,
                            includeids and 'includeids' or None))
               if type(data) is StringType:
                   data = [self.tk.split(data)]
               return map(self.__winfo_parseitem, data)
    1:     def __winfo_parseitem(self, t):
               """Internal function."""
               return t[:1] + tuple(map(self.__winfo_getint, t[1:]))
    1:     def __winfo_getint(self, x):
               """Internal function."""
               return int(x, 0)
    1:     def winfo_vrootheight(self):
               """Return the height of the virtual root window associated with this
               widget in pixels. If there is no virtual root window return the
               height of the screen."""
               return getint(
                   self.tk.call('winfo', 'vrootheight', self._w))
    1:     def winfo_vrootwidth(self):
               """Return the width of the virtual root window associated with this
               widget in pixel. If there is no virtual root window return the
               width of the screen."""
               return getint(
                   self.tk.call('winfo', 'vrootwidth', self._w))
    1:     def winfo_vrootx(self):
               """Return the x offset of the virtual root relative to the root
               window of the screen of this widget."""
               return getint(
                   self.tk.call('winfo', 'vrootx', self._w))
    1:     def winfo_vrooty(self):
               """Return the y offset of the virtual root relative to the root
               window of the screen of this widget."""
               return getint(
                   self.tk.call('winfo', 'vrooty', self._w))
    1:     def winfo_width(self):
               """Return the width of this widget."""
               return getint(
                   self.tk.call('winfo', 'width', self._w))
    1:     def winfo_x(self):
               """Return the x coordinate of the upper left corner of this widget
               in the parent."""
               return getint(
                   self.tk.call('winfo', 'x', self._w))
    1:     def winfo_y(self):
               """Return the y coordinate of the upper left corner of this widget
               in the parent."""
               return getint(
                   self.tk.call('winfo', 'y', self._w))
    1:     def update(self):
               """Enter event loop until all pending events have been processed by Tcl."""
    1:         self.tk.call('update')
    1:     def update_idletasks(self):
               """Enter event loop until all idle callbacks have been called. This
               will update the display of windows but not process events caused by
               the user."""
  783:         self.tk.call('update', 'idletasks')
    1:     def bindtags(self, tagList=None):
               """Set or get the list of bindtags for this widget.
       
               With no argument return the list of all bindtags associated with
               this widget. With a list of strings as argument the bindtags are
               set to this list. The bindtags determine in which order events are
               processed (see bind)."""
               if tagList is None:
                   return self.tk.splitlist(
                       self.tk.call('bindtags', self._w))
               else:
                   self.tk.call('bindtags', self._w, tagList)
    1:     def _bind(self, what, sequence, func, add, needcleanup=1):
               """Internal function."""
    8:         if type(func) is StringType:
                   self.tk.call(what + (sequence, func))
    8:         elif func:
    8:             funcid = self._register(func, self._substitute,
    8:                         needcleanup)
    8:             cmd = ('%sif {"[%s %s]" == "break"} break\n'
                          %
    8:                    (add and '+' or '',
    8:                 funcid, self._subst_format_str))
    8:             self.tk.call(what + (sequence, cmd))
    8:             return funcid
               elif sequence:
                   return self.tk.call(what + (sequence,))
               else:
                   return self.tk.splitlist(self.tk.call(what))
    1:     def bind(self, sequence=None, func=None, add=None):
               """Bind to this widget at event SEQUENCE a call to function FUNC.
       
               SEQUENCE is a string of concatenated event
               patterns. An event pattern is of the form
               <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
               of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
               Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
               B3, Alt, Button4, B4, Double, Button5, B5 Triple,
               Mod1, M1. TYPE is one of Activate, Enter, Map,
               ButtonPress, Button, Expose, Motion, ButtonRelease
               FocusIn, MouseWheel, Circulate, FocusOut, Property,
               Colormap, Gravity Reparent, Configure, KeyPress, Key,
               Unmap, Deactivate, KeyRelease Visibility, Destroy,
               Leave and DETAIL is the button number for ButtonPress,
               ButtonRelease and DETAIL is the Keysym for KeyPress and
               KeyRelease. Examples are
               <Control-Button-1> for pressing Control and mouse button 1 or
               <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
               An event pattern can also be a virtual event of the form
               <<AString>> where AString can be arbitrary. This
               event can be generated by event_generate.
               If events are concatenated they must appear shortly
               after each other.
       
               FUNC will be called if the event sequence occurs with an
               instance of Event as argument. If the return value of FUNC is
               "break" no further bound function is invoked.
       
               An additional boolean parameter ADD specifies whether FUNC will
               be called additionally to the other bound function or whether
               it will replace the previous function.
       
               Bind will return an identifier to allow deletion of the bound function with
               unbind without memory leak.
       
               If FUNC or SEQUENCE is omitted the bound function or list
               of bound events are returned."""
       
    8:         return self._bind(('bind', self._w), sequence, func, add)
    1:     def unbind(self, sequence, funcid=None):
               """Unbind for this widget for event SEQUENCE  the
               function identified with FUNCID."""
               self.tk.call('bind', self._w, sequence, '')
               if funcid:
                   self.deletecommand(funcid)
    1:     def bind_all(self, sequence=None, func=None, add=None):
               """Bind to all widgets at an event SEQUENCE a call to function FUNC.
               An additional boolean parameter ADD specifies whether FUNC will
               be called additionally to the other bound function or whether
               it will replace the previous function. See bind for the return value."""
               return self._bind(('bind', 'all'), sequence, func, add, 0)
    1:     def unbind_all(self, sequence):
               """Unbind for all widgets for event SEQUENCE all functions."""
               self.tk.call('bind', 'all' , sequence, '')
    1:     def bind_class(self, className, sequence=None, func=None, add=None):
       
               """Bind to widgets with bindtag CLASSNAME at event
               SEQUENCE a call of function FUNC. An additional
               boolean parameter ADD specifies whether FUNC will be
               called additionally to the other bound function or
               whether it will replace the previous function. See bind for
               the return value."""
       
               return self._bind(('bind', className), sequence, func, add, 0)
    1:     def unbind_class(self, className, sequence):
               """Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE
               all functions."""
               self.tk.call('bind', className , sequence, '')
    1:     def mainloop(self, n=0):
               """Call the mainloop of Tk."""
  241:         self.tk.mainloop(n)
    1:     def quit(self):
               """Quit the Tcl interpreter. All widgets will be destroyed."""
  241:         self.tk.quit()
    1:     def _getints(self, string):
               """Internal function."""
               if string:
                   return tuple(map(getint, self.tk.splitlist(string)))
    1:     def _getdoubles(self, string):
               """Internal function."""
               if string:
                   return tuple(map(getdouble, self.tk.splitlist(string)))
    1:     def _getboolean(self, string):
               """Internal function."""
               if string:
                   return self.tk.getboolean(string)
    1:     def _displayof(self, displayof):
               """Internal function."""
               if displayof:
                   return ('-displayof', displayof)
               if displayof is None:
                   return ('-displayof', self._w)
               return ()
    1:     @property
           def _windowingsystem(self):
               """Internal function."""
               try:
                   return self._root()._windowingsystem_cached
               except AttributeError:
                   ws = self._root()._windowingsystem_cached = \
                               self.tk.call('tk', 'windowingsystem')
                   return ws
    1:     def _options(self, cnf, kw = None):
               """Internal function."""
  658:         if kw:
  356:             cnf = _cnfmerge((cnf, kw))
               else:
  302:             cnf = _cnfmerge(cnf)
  658:         res = ()
 2116:         for k, v in cnf.items():
 1458:             if v is not None:
 1458:                 if k[-1] == '_': k = k[:-1]
 1458:                 if hasattr(v, '__call__'):
                           v = self._register(v)
 1458:                 elif isinstance(v, (tuple, list)):
    1:                     nv = []
    4:                     for item in v:
    3:                         if not isinstance(item, (basestring, int)):
                                   break
    3:                         elif isinstance(item, int):
                                   nv.append('%d' % item)
                               else:
                                   # format it to proper Tcl code if it contains space
    3:                             nv.append(_stringify(item))
                           else:
    1:                         v = ' '.join(nv)
 1458:                 res = res + ('-'+k, v)
  658:         return res
    1:     def nametowidget(self, name):
               """Return the Tkinter instance of a widget identified by
               its Tcl name NAME."""
               name = str(name).split('.')
               w = self
       
               if not name[0]:
                   w = w._root()
                   name = name[1:]
       
               for n in name:
                   if not n:
                       break
                   w = w.children[n]
       
               return w
    1:     _nametowidget = nametowidget
    1:     def _register(self, func, subst=None, needcleanup=1):
               """Return a newly created Tcl function. If this
               function is called, the Python function FUNC will
               be executed. An optional function SUBST can
               be given which will be executed before FUNC."""
  251:         f = CallWrapper(func, subst, self).__call__
  251:         name = repr(id(f))
  251:         try:
  251:             func = func.im_func
  250:         except AttributeError:
  250:             pass
  251:         try:
  251:             name = name + func.__name__
               except AttributeError:
                   pass
  251:         self.tk.createcommand(name, f)
  251:         if needcleanup:
  251:             if self._tclCommands is None:
                       self._tclCommands = []
  251:             self._tclCommands.append(name)
  251:         return name
    1:     register = _register
    1:     def _root(self):
               """Internal function."""
               w = self
               while w.master: w = w.master
               return w
           _subst_format = ('%#', '%b', '%f', '%h', '%k',
                    '%s', '%t', '%w', '%x', '%y',
    1:              '%A', '%E', '%K', '%N', '%W', '%T', '%X', '%Y', '%D')
    1:     _subst_format_str = " ".join(_subst_format)
    1:     def _substitute(self, *args):
               """Internal function."""
               if len(args) != len(self._subst_format): return args
               getboolean = self.tk.getboolean
       
               getint = int
               def getint_event(s):
                   """Tk changed behavior in 8.4.2, returning "??" rather more often."""
                   try:
                       return int(s)
                   except ValueError:
                       return s
       
               nsign, b, f, h, k, s, t, w, x, y, A, E, K, N, W, T, X, Y, D = args
               # Missing: (a, c, d, m, o, v, B, R)
               e = Event()
               # serial field: valid vor all events
               # number of button: ButtonPress and ButtonRelease events only
               # height field: Configure, ConfigureRequest, Create,
               # ResizeRequest, and Expose events only
               # keycode field: KeyPress and KeyRelease events only
               # time field: "valid for events that contain a time field"
               # width field: Configure, ConfigureRequest, Create, ResizeRequest,
               # and Expose events only
               # x field: "valid for events that contain a x field"
               # y field: "valid for events that contain a y field"
               # keysym as decimal: KeyPress and KeyRelease events only
               # x_root, y_root fields: ButtonPress, ButtonRelease, KeyPress,
               # KeyRelease,and Motion events
               e.serial = getint(nsign)
               e.num = getint_event(b)
               try: e.focus = getboolean(f)
               except TclError: pass
               e.height = getint_event(h)
               e.keycode = getint_event(k)
               e.state = getint_event(s)
               e.time = getint_event(t)
               e.width = getint_event(w)
               e.x = getint_event(x)
               e.y = getint_event(y)
               e.char = A
               try: e.send_event = getboolean(E)
               except TclError: pass
               e.keysym = K
               e.keysym_num = getint_event(N)
               e.type = T
               try:
                   e.widget = self._nametowidget(W)
               except KeyError:
                   e.widget = W
               e.x_root = getint_event(X)
               e.y_root = getint_event(Y)
               try:
                   e.delta = getint(D)
               except ValueError:
                   e.delta = 0
               return (e,)
    1:     def _report_exception(self):
               """Internal function."""
               import sys
               exc, val, tb = sys.exc_type, sys.exc_value, sys.exc_traceback
               root = self._root()
               root.report_callback_exception(exc, val, tb)
       
    1:     def _getconfigure(self, *args):
               """Call Tcl configure command and return the result as a dict."""
               cnf = {}
               for x in self.tk.splitlist(self.tk.call(*args)):
                   x = self.tk.splitlist(x)
                   cnf[x[0][1:]] = (x[0][1:],) + x[1:]
               return cnf
       
    1:     def _getconfigure1(self, *args):
               x = self.tk.splitlist(self.tk.call(*args))
               return (x[0][1:],) + x[1:]
       
    1:     def _configure(self, cmd, cnf, kw):
               """Internal function."""
  300:         if kw:
  300:             cnf = _cnfmerge((cnf, kw))
               elif cnf:
                   cnf = _cnfmerge(cnf)
  300:         if cnf is None:
                   return self._getconfigure(_flatten((self._w, cmd)))
  300:         if type(cnf) is StringType:
                   return self._getconfigure1(_flatten((self._w, cmd, '-'+cnf)))
  300:         self.tk.call(_flatten((self._w, cmd)) + self._options(cnf))
           # These used to be defined in Widget:
    1:     def configure(self, cnf=None, **kw):
               """Configure resources of a widget.
       
               The values for resources are specified as keyword
               arguments. To get an overview about
               the allowed keyword arguments call the method keys.
               """
               return self._configure('configure', cnf, kw)
    1:     config = configure
    1:     def cget(self, key):
               """Return the resource value for a KEY given as string."""
               return self.tk.call(self._w, 'cget', '-' + key)
    1:     __getitem__ = cget
    1:     def __setitem__(self, key, value):
               self.configure({key: value})
    1:     def __contains__(self, key):
               raise TypeError("Tkinter objects don't support 'in' tests.")
    1:     def keys(self):
               """Return a list of all resource names of this widget."""
               return [x[0][1:] for x in
                       self.tk.splitlist(self.tk.call(self._w, 'configure'))]
    1:     def __str__(self):
               """Return the window path name of this widget."""
               return self._w
           # Pack methods that apply to the master
    1:     _noarg_ = ['_noarg_']
    1:     def pack_propagate(self, flag=_noarg_):
               """Set or get the status for propagation of geometry information.
       
               A boolean argument specifies whether the geometry information
               of the slaves will determine the size of this widget. If no argument
               is given the current setting will be returned.
               """
               if flag is Misc._noarg_:
                   return self._getboolean(self.tk.call(
                       'pack', 'propagate', self._w))
               else:
                   self.tk.call('pack', 'propagate', self._w, flag)
    1:     propagate = pack_propagate
    1:     def pack_slaves(self):
               """Return a list of all slaves of this widget
               in its packing order."""
               return map(self._nametowidget,
                      self.tk.splitlist(
                          self.tk.call('pack', 'slaves', self._w)))
    1:     slaves = pack_slaves
           # Place method that applies to the master
    1:     def place_slaves(self):
               """Return a list of all slaves of this widget
               in its packing order."""
               return map(self._nametowidget,
                      self.tk.splitlist(
                          self.tk.call(
                              'place', 'slaves', self._w)))
           # Grid methods that apply to the master
    1:     def grid_bbox(self, column=None, row=None, col2=None, row2=None):
               """Return a tuple of integer coordinates for the bounding
               box of this widget controlled by the geometry manager grid.
       
               If COLUMN, ROW is given the bounding box applies from
               the cell with row and column 0 to the specified
               cell. If COL2 and ROW2 are given the bounding box
               starts at that cell.
       
               The returned integers specify the offset of the upper left
               corner in the master widget and the width and height.
               """
               args = ('grid', 'bbox', self._w)
               if column is not None and row is not None:
                   args = args + (column, row)
               if col2 is not None and row2 is not None:
                   args = args + (col2, row2)
               return self._getints(self.tk.call(*args)) or None
       
    1:     bbox = grid_bbox
       
    1:     def _gridconvvalue(self, value):
               if isinstance(value, (str, _tkinter.Tcl_Obj)):
                   try:
                       svalue = str(value)
                       if not svalue:
                           return None
                       elif '.' in svalue:
                           return getdouble(svalue)
                       else:
                           return getint(svalue)
                   except ValueError:
                       pass
               return value
       
    1:     def _grid_configure(self, command, index, cnf, kw):
               """Internal function."""
               if type(cnf) is StringType and not kw:
                   if cnf[-1:] == '_':
                       cnf = cnf[:-1]
                   if cnf[:1] != '-':
                       cnf = '-'+cnf
                   options = (cnf,)
               else:
                   options = self._options(cnf, kw)
               if not options:
                   return _splitdict(
                       self.tk,
                       self.tk.call('grid', command, self._w, index),
                       conv=self._gridconvvalue)
               res = self.tk.call(
                         ('grid', command, self._w, index)
                         + options)
               if len(options) == 1:
                   return self._gridconvvalue(res)
       
    1:     def grid_columnconfigure(self, index, cnf={}, **kw):
               """Configure column INDEX of a grid.
       
               Valid resources are minsize (minimum size of the column),
               weight (how much does additional space propagate to this column)
               and pad (how much space to let additionally)."""
               return self._grid_configure('columnconfigure', index, cnf, kw)
    1:     columnconfigure = grid_columnconfigure
    1:     def grid_location(self, x, y):
               """Return a tuple of column and row which identify the cell
               at which the pixel at position X and Y inside the master
               widget is located."""
               return self._getints(
                   self.tk.call(
                       'grid', 'location', self._w, x, y)) or None
    1:     def grid_propagate(self, flag=_noarg_):
               """Set or get the status for propagation of geometry information.
       
               A boolean argument specifies whether the geometry information
               of the slaves will determine the size of this widget. If no argument
               is given, the current setting will be returned.
               """
               if flag is Misc._noarg_:
                   return self._getboolean(self.tk.call(
                       'grid', 'propagate', self._w))
               else:
                   self.tk.call('grid', 'propagate', self._w, flag)
    1:     def grid_rowconfigure(self, index, cnf={}, **kw):
               """Configure row INDEX of a grid.
       
               Valid resources are minsize (minimum size of the row),
               weight (how much does additional space propagate to this row)
               and pad (how much space to let additionally)."""
               return self._grid_configure('rowconfigure', index, cnf, kw)
    1:     rowconfigure = grid_rowconfigure
    1:     def grid_size(self):
               """Return a tuple of the number of column and rows in the grid."""
               return self._getints(
                   self.tk.call('grid', 'size', self._w)) or None
    1:     size = grid_size
    1:     def grid_slaves(self, row=None, column=None):
               """Return a list of all slaves of this widget
               in its packing order."""
               args = ()
               if row is not None:
                   args = args + ('-row', row)
               if column is not None:
                   args = args + ('-column', column)
               return map(self._nametowidget,
                      self.tk.splitlist(self.tk.call(
                          ('grid', 'slaves', self._w) + args)))
       
           # Support for the "event" command, new in Tk 4.2.
           # By Case Roole.
       
    1:     def event_add(self, virtual, *sequences):
               """Bind a virtual event VIRTUAL (of the form <<Name>>)
               to an event SEQUENCE such that the virtual event is triggered
               whenever SEQUENCE occurs."""
               args = ('event', 'add', virtual) + sequences
               self.tk.call(args)
       
    1:     def event_delete(self, virtual, *sequences):
               """Unbind a virtual event VIRTUAL from SEQUENCE."""
               args = ('event', 'delete', virtual) + sequences
               self.tk.call(args)
       
    1:     def event_generate(self, sequence, **kw):
               """Generate an event SEQUENCE. Additional
               keyword arguments specify parameter of the event
               (e.g. x, y, rootx, rooty)."""
               args = ('event', 'generate', self._w, sequence)
               for k, v in kw.items():
                   args = args + ('-%s' % k, str(v))
               self.tk.call(args)
       
    1:     def event_info(self, virtual=None):
               """Return a list of all virtual events or the information
               about the SEQUENCE bound to the virtual event VIRTUAL."""
               return self.tk.splitlist(
                   self.tk.call('event', 'info', virtual))
       
           # Image related commands
       
    1:     def image_names(self):
               """Return a list of all existing image names."""
               return self.tk.splitlist(self.tk.call('image', 'names'))
       
    1:     def image_types(self):
               """Return a list of all available image types (e.g. phote bitmap)."""
               return self.tk.splitlist(self.tk.call('image', 'types'))
       
       
    2: class CallWrapper:
           """Internal class. Stores function to call when some user
    1:     defined Tcl function is called e.g. after an event occurred."""
    1:     def __init__(self, func, subst, widget):
               """Store FUNC, SUBST and WIDGET as members."""
  251:         self.func = func
  251:         self.subst = subst
  251:         self.widget = widget
    1:     def __call__(self, *args):
               """Apply first function SUBST to arguments, than FUNC."""
  241:         try:
  241:             if self.subst:
                       args = self.subst(*args)
  241:             return self.func(*args)
               except SystemExit, msg:
                   raise SystemExit, msg
               except:
                   self.widget._report_exception()
       
       
    2: class XView:
           """Mix-in class for querying and changing the horizontal position
    1:     of a widget's window."""
       
    1:     def xview(self, *args):
               """Query and change the horizontal position of the view."""
               res = self.tk.call(self._w, 'xview', *args)
               if not args:
                   return self._getdoubles(res)
       
    1:     def xview_moveto(self, fraction):
               """Adjusts the view in the window so that FRACTION of the
               total width of the canvas is off-screen to the left."""
               self.tk.call(self._w, 'xview', 'moveto', fraction)
       
    1:     def xview_scroll(self, number, what):
               """Shift the x-view according to NUMBER which is measured in "units"
               or "pages" (WHAT)."""
               self.tk.call(self._w, 'xview', 'scroll', number, what)
       
       
    2: class YView:
           """Mix-in class for querying and changing the vertical position
    1:     of a widget's window."""
       
    1:     def yview(self, *args):
               """Query and change the vertical position of the view."""
               res = self.tk.call(self._w, 'yview', *args)
               if not args:
                   return self._getdoubles(res)
       
    1:     def yview_moveto(self, fraction):
               """Adjusts the view in the window so that FRACTION of the
               total height of the canvas is off-screen to the top."""
               self.tk.call(self._w, 'yview', 'moveto', fraction)
       
    1:     def yview_scroll(self, number, what):
               """Shift the y-view according to NUMBER which is measured in
               "units" or "pages" (WHAT)."""
               self.tk.call(self._w, 'yview', 'scroll', number, what)
       
       
    2: class Wm:
    1:     """Provides functions for the communication with the window manager."""
       
           def wm_aspect(self,
    1:               minNumer=None, minDenom=None,
    1:               maxNumer=None, maxDenom=None):
               """Instruct the window manager to set the aspect ratio (width/height)
               of this widget to be between MINNUMER/MINDENOM and MAXNUMER/MAXDENOM. Return a tuple
               of the actual values if no argument is given."""
               return self._getints(
                   self.tk.call('wm', 'aspect', self._w,
                            minNumer, minDenom,
                            maxNumer, maxDenom))
    1:     aspect = wm_aspect
       
    1:     def wm_attributes(self, *args):
               """This subcommand returns or sets platform specific attributes
       
               The first form returns a list of the platform specific flags and
               their values. The second form returns the value for the specific
               option. The third form sets one or more of the values. The values
               are as follows:
       
               On Windows, -disabled gets or sets whether the window is in a
               disabled state. -toolwindow gets or sets the style of the window
               to toolwindow (as defined in the MSDN). -topmost gets or sets
               whether this is a topmost window (displays above all other
               windows).
       
               On Macintosh, XXXXX
       
               On Unix, there are currently no special attribute values.
               """
               args = ('wm', 'attributes', self._w) + args
               return self.tk.call(args)
    1:     attributes=wm_attributes
       
    1:     def wm_client(self, name=None):
               """Store NAME in WM_CLIENT_MACHINE property of this widget. Return
               current value."""
               return self.tk.call('wm', 'client', self._w, name)
    1:     client = wm_client
    1:     def wm_colormapwindows(self, *wlist):
               """Store list of window names (WLIST) into WM_COLORMAPWINDOWS property
               of this widget. This list contains windows whose colormaps differ from their
               parents. Return current list of widgets if WLIST is empty."""
               if len(wlist) > 1:
                   wlist = (wlist,) # Tk needs a list of windows here
               args = ('wm', 'colormapwindows', self._w) + wlist
               if wlist:
                   self.tk.call(args)
               else:
                   return map(self._nametowidget, self.tk.splitlist(self.tk.call(args)))
    1:     colormapwindows = wm_colormapwindows
    1:     def wm_command(self, value=None):
               """Store VALUE in WM_COMMAND property. It is the command
               which shall be used to invoke the application. Return current
               command if VALUE is None."""
               return self.tk.call('wm', 'command', self._w, value)
    1:     command = wm_command
    1:     def wm_deiconify(self):
               """Deiconify this widget. If it was never mapped it will not be mapped.
               On Windows it will raise this widget and give it the focus."""
               return self.tk.call('wm', 'deiconify', self._w)
    1:     deiconify = wm_deiconify
    1:     def wm_focusmodel(self, model=None):
               """Set focus model to MODEL. "active" means that this widget will claim
               the focus itself, "passive" means that the window manager shall give
               the focus. Return current focus model if MODEL is None."""
               return self.tk.call('wm', 'focusmodel', self._w, model)
    1:     focusmodel = wm_focusmodel
    1:     def wm_frame(self):
               """Return identifier for decorative frame of this widget if present."""
               return self.tk.call('wm', 'frame', self._w)
    1:     frame = wm_frame
    1:     def wm_geometry(self, newGeometry=None):
               """Set geometry to NEWGEOMETRY of the form =widthxheight+x+y. Return
               current value if None is given."""
               return self.tk.call('wm', 'geometry', self._w, newGeometry)
    1:     geometry = wm_geometry
           def wm_grid(self,
    1:          baseWidth=None, baseHeight=None,
    1:          widthInc=None, heightInc=None):
               """Instruct the window manager that this widget shall only be
               resized on grid boundaries. WIDTHINC and HEIGHTINC are the width and
               height of a grid unit in pixels. BASEWIDTH and BASEHEIGHT are the
               number of grid units requested in Tk_GeometryRequest."""
               return self._getints(self.tk.call(
                   'wm', 'grid', self._w,
                   baseWidth, baseHeight, widthInc, heightInc))
    1:     grid = wm_grid
    1:     def wm_group(self, pathName=None):
               """Set the group leader widgets for related widgets to PATHNAME. Return
               the group leader of this widget if None is given."""
               return self.tk.call('wm', 'group', self._w, pathName)
    1:     group = wm_group
    1:     def wm_iconbitmap(self, bitmap=None, default=None):
               """Set bitmap for the iconified widget to BITMAP. Return
               the bitmap if None is given.
       
               Under Windows, the DEFAULT parameter can be used to set the icon
               for the widget and any descendents that don't have an icon set
               explicitly.  DEFAULT can be the relative path to a .ico file
               (example: root.iconbitmap(default='myicon.ico') ).  See Tk
               documentation for more information."""
               if default:
                   return self.tk.call('wm', 'iconbitmap', self._w, '-default', default)
               else:
                   return self.tk.call('wm', 'iconbitmap', self._w, bitmap)
    1:     iconbitmap = wm_iconbitmap
    1:     def wm_iconify(self):
               """Display widget as icon."""
               return self.tk.call('wm', 'iconify', self._w)
    1:     iconify = wm_iconify
    1:     def wm_iconmask(self, bitmap=None):
               """Set mask for the icon bitmap of this widget. Return the
               mask if None is given."""
               return self.tk.call('wm', 'iconmask', self._w, bitmap)
    1:     iconmask = wm_iconmask
    1:     def wm_iconname(self, newName=None):
               """Set the name of the icon for this widget. Return the name if
               None is given."""
               return self.tk.call('wm', 'iconname', self._w, newName)
    1:     iconname = wm_iconname
    1:     def wm_iconposition(self, x=None, y=None):
               """Set the position of the icon of this widget to X and Y. Return
               a tuple of the current values of X and X if None is given."""
               return self._getints(self.tk.call(
                   'wm', 'iconposition', self._w, x, y))
    1:     iconposition = wm_iconposition
    1:     def wm_iconwindow(self, pathName=None):
               """Set widget PATHNAME to be displayed instead of icon. Return the current
               value if None is given."""
               return self.tk.call('wm', 'iconwindow', self._w, pathName)
    1:     iconwindow = wm_iconwindow
    1:     def wm_maxsize(self, width=None, height=None):
               """Set max WIDTH and HEIGHT for this widget. If the window is gridded
               the values are given in grid units. Return the current values if None
               is given."""
               return self._getints(self.tk.call(
                   'wm', 'maxsize', self._w, width, height))
    1:     maxsize = wm_maxsize
    1:     def wm_minsize(self, width=None, height=None):
               """Set min WIDTH and HEIGHT for this widget. If the window is gridded
               the values are given in grid units. Return the current values if None
               is given."""
               return self._getints(self.tk.call(
                   'wm', 'minsize', self._w, width, height))
    1:     minsize = wm_minsize
    1:     def wm_overrideredirect(self, boolean=None):
               """Instruct the window manager to ignore this widget
               if BOOLEAN is given with 1. Return the current value if None
               is given."""
               return self._getboolean(self.tk.call(
                   'wm', 'overrideredirect', self._w, boolean))
    1:     overrideredirect = wm_overrideredirect
    1:     def wm_positionfrom(self, who=None):
               """Instruct the window manager that the position of this widget shall
               be defined by the user if WHO is "user", and by its own policy if WHO is
               "program"."""
               return self.tk.call('wm', 'positionfrom', self._w, who)
    1:     positionfrom = wm_positionfrom
    1:     def wm_protocol(self, name=None, func=None):
               """Bind function FUNC to command NAME for this widget.
               Return the function bound to NAME if None is given. NAME could be
               e.g. "WM_SAVE_YOURSELF" or "WM_DELETE_WINDOW"."""
    2:         if hasattr(func, '__call__'):
    2:             command = self._register(func)
               else:
                   command = func
    2:         return self.tk.call(
    2:             'wm', 'protocol', self._w, name, command)
    1:     protocol = wm_protocol
    1:     def wm_resizable(self, width=None, height=None):
               """Instruct the window manager whether this width can be resized
               in WIDTH or HEIGHT. Both values are boolean values."""
    1:         return self.tk.call('wm', 'resizable', self._w, width, height)
    1:     resizable = wm_resizable
    1:     def wm_sizefrom(self, who=None):
               """Instruct the window manager that the size of this widget shall
               be defined by the user if WHO is "user", and by its own policy if WHO is
               "program"."""
               return self.tk.call('wm', 'sizefrom', self._w, who)
    1:     sizefrom = wm_sizefrom
    1:     def wm_state(self, newstate=None):
               """Query or set the state of this widget as one of normal, icon,
               iconic (see wm_iconwindow), withdrawn, or zoomed (Windows only)."""
               return self.tk.call('wm', 'state', self._w, newstate)
    1:     state = wm_state
    1:     def wm_title(self, string=None):
               """Set the title of this widget."""
    1:         return self.tk.call('wm', 'title', self._w, string)
    1:     title = wm_title
    1:     def wm_transient(self, master=None):
               """Instruct the window manager that this widget is transient
               with regard to widget MASTER."""
               return self.tk.call('wm', 'transient', self._w, master)
    1:     transient = wm_transient
    1:     def wm_withdraw(self):
               """Withdraw this widget from the screen such that it is unmapped
               and forgotten by the window manager. Re-draw it with wm_deiconify."""
               return self.tk.call('wm', 'withdraw', self._w)
    1:     withdraw = wm_withdraw
       
       
    2: class Tk(Misc, Wm):
           """Toplevel widget of Tk which represents mostly the main window
    1:     of an application. It has an associated Tcl interpreter."""
    1:     _w = '.'
    1:     def __init__(self, screenName=None, baseName=None, className='Tk',
    1:                  useTk=1, sync=0, use=None):
               """Return a new Toplevel widget on screen SCREENNAME. A new Tcl interpreter will
               be created. BASENAME will be used for the identification of the profile file (see
               readprofile).
               It is constructed from sys.argv[0] without extensions if None is given. CLASSNAME
               is the name of the widget class."""
    1:         self.master = None
    1:         self.children = {}
    1:         self._tkloaded = 0
               # to avoid recursions in the getattr code in case of failure, we
               # ensure that self.tk is always _something_.
    1:         self.tk = None
    1:         if baseName is None:
    1:             import os
    1:             baseName = os.path.basename(sys.argv[0])
    1:             baseName, ext = os.path.splitext(baseName)
    1:             if ext not in ('.py', '.pyc', '.pyo'):
                       baseName = baseName + ext
    1:         interactive = 0
    1:         self.tk = _tkinter.create(screenName, baseName, className, interactive, wantobjects, useTk, sync, use)
    1:         if useTk:
    1:             self._loadtk()
    1:         if not sys.flags.ignore_environment:
                   # Issue #16248: Honor the -E flag to avoid code injection.
    1:             self.readprofile(baseName, className)
    1:     def loadtk(self):
               if not self._tkloaded:
                   self.tk.loadtk()
                   self._loadtk()
    1:     def _loadtk(self):
    1:         self._tkloaded = 1
               global _default_root
               # Version sanity checks
    1:         tk_version = self.tk.getvar('tk_version')
    1:         if tk_version != _tkinter.TK_VERSION:
                   raise RuntimeError, \
                   "tk.h version (%s) doesn't match libtk.a version (%s)" \
                   % (_tkinter.TK_VERSION, tk_version)
               # Under unknown circumstances, tcl_version gets coerced to float
    1:         tcl_version = str(self.tk.getvar('tcl_version'))
    1:         if tcl_version != _tkinter.TCL_VERSION:
                   raise RuntimeError, \
                   "tcl.h version (%s) doesn't match libtcl.a version (%s)" \
                   % (_tkinter.TCL_VERSION, tcl_version)
    1:         if TkVersion < 4.0:
                   raise RuntimeError, \
                   "Tk 4.0 or higher is required; found Tk %s" \
                   % str(TkVersion)
               # Create and register the tkerror and exit commands
               # We need to inline parts of _register here, _ register
               # would register differently-named commands.
    1:         if self._tclCommands is None:
    1:             self._tclCommands = []
    1:         self.tk.createcommand('tkerror', _tkerror)
    1:         self.tk.createcommand('exit', _exit)
    1:         self._tclCommands.append('tkerror')
    1:         self._tclCommands.append('exit')
    1:         if _support_default_root and not _default_root:
    1:             _default_root = self
    1:         self.protocol("WM_DELETE_WINDOW", self.destroy)
    1:     def destroy(self):
               """Destroy this and all descendants widgets. This will
               end the application of this Tcl interpreter."""
    2:         for c in self.children.values(): c.destroy()
    1:         self.tk.call('destroy', self._w)
    1:         Misc.destroy(self)
               global _default_root
    1:         if _support_default_root and _default_root is self:
    1:             _default_root = None
    1:     def readprofile(self, baseName, className):
               """Internal function. It reads BASENAME.tcl and CLASSNAME.tcl into
               the Tcl Interpreter and calls execfile on BASENAME.py and CLASSNAME.py if
               such a file exists in the home directory."""
    1:         import os
    1:         if 'HOME' in os.environ: home = os.environ['HOME']
               else: home = os.curdir
    1:         class_tcl = os.path.join(home, '.%s.tcl' % className)
    1:         class_py = os.path.join(home, '.%s.py' % className)
    1:         base_tcl = os.path.join(home, '.%s.tcl' % baseName)
    1:         base_py = os.path.join(home, '.%s.py' % baseName)
    1:         dir = {'self': self}
    1:         exec 'from Tkinter import *' in dir
    1:         if os.path.isfile(class_tcl):
                   self.tk.call('source', class_tcl)
    1:         if os.path.isfile(class_py):
                   execfile(class_py, dir)
    1:         if os.path.isfile(base_tcl):
                   self.tk.call('source', base_tcl)
    1:         if os.path.isfile(base_py):
                   execfile(base_py, dir)
    1:     def report_callback_exception(self, exc, val, tb):
               """Report callback exception on sys.stderr.
       
               Applications may want to override this internal function, and
               should when sys.stderr is None."""
               import traceback, sys
               print >>sys.stderr, "Exception in Tkinter callback"
               sys.last_type = exc
               sys.last_value = val
               sys.last_traceback = tb
               traceback.print_exception(exc, val, tb)
    1:     def __getattr__(self, attr):
               "Delegate attribute access to the interpreter object"
  728:         return getattr(self.tk, attr)
       
       # Ideally, the classes Pack, Place and Grid disappear, the
       # pack/place/grid methods are defined on the Widget class, and
       # everybody uses w.pack_whatever(...) instead of Pack.whatever(w,
       # ...), with pack(), place() and grid() being short for
       # pack_configure(), place_configure() and grid_columnconfigure(), and
       # forget() being short for pack_forget().  As a practical matter, I'm
       # afraid that there is too much code out there that may be using the
       # Pack, Place or Grid class, so I leave them intact -- but only as
       # backwards compatibility features.  Also note that those methods that
       # take a master as argument (e.g. pack_propagate) have been moved to
       # the Misc class (which now incorporates all methods common between
       # toplevel and interior widgets).  Again, for compatibility, these are
       # copied into the Pack, Place or Grid class.
       
       
    1: def Tcl(screenName=None, baseName=None, className='Tk', useTk=0):
           return Tk(screenName, baseName, className, useTk)
       
    2: class Pack:
           """Geometry manager Pack.
       
    1:     Base class to use the methods pack_* in every widget."""
    1:     def pack_configure(self, cnf={}, **kw):
               """Pack a widget in the parent widget. Use as options:
               after=widget - pack it after you have packed widget
               anchor=NSEW (or subset) - position widget according to
                                         given direction
               before=widget - pack it before you will pack widget
               expand=bool - expand widget if parent size grows
               fill=NONE or X or Y or BOTH - fill widget if widget grows
               in=master - use master to contain this widget
               in_=master - see 'in' option description
               ipadx=amount - add internal padding in x direction
               ipady=amount - add internal padding in y direction
               padx=amount - add padding in x direction
               pady=amount - add padding in y direction
               side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
               """
    1:         self.tk.call(
    1:               ('pack', 'configure', self._w)
    1:               + self._options(cnf, kw))
    1:     pack = configure = config = pack_configure
    1:     def pack_forget(self):
               """Unmap this widget and do not use it for the packing order."""
               self.tk.call('pack', 'forget', self._w)
    1:     forget = pack_forget
    1:     def pack_info(self):
               """Return information about the packing options
               for this widget."""
               d = _splitdict(self.tk, self.tk.call('pack', 'info', self._w))
               if 'in' in d:
                   d['in'] = self.nametowidget(d['in'])
               return d
    1:     info = pack_info
    1:     propagate = pack_propagate = Misc.pack_propagate
    1:     slaves = pack_slaves = Misc.pack_slaves
       
    2: class Place:
           """Geometry manager Place.
       
    1:     Base class to use the methods place_* in every widget."""
    1:     def place_configure(self, cnf={}, **kw):
               """Place a widget in the parent widget. Use as options:
               in=master - master relative to which the widget is placed
               in_=master - see 'in' option description
               x=amount - locate anchor of this widget at position x of master
               y=amount - locate anchor of this widget at position y of master
               relx=amount - locate anchor of this widget between 0.0 and 1.0
                             relative to width of master (1.0 is right edge)
               rely=amount - locate anchor of this widget between 0.0 and 1.0
                             relative to height of master (1.0 is bottom edge)
               anchor=NSEW (or subset) - position anchor according to given direction
               width=amount - width of this widget in pixel
               height=amount - height of this widget in pixel
               relwidth=amount - width of this widget between 0.0 and 1.0
                                 relative to width of master (1.0 is the same width
                                 as the master)
               relheight=amount - height of this widget between 0.0 and 1.0
                                  relative to height of master (1.0 is the same
                                  height as the master)
               bordermode="inside" or "outside" - whether to take border width of
                                                  master widget into account
               """
               self.tk.call(
                     ('place', 'configure', self._w)
                     + self._options(cnf, kw))
    1:     place = configure = config = place_configure
    1:     def place_forget(self):
               """Unmap this widget."""
               self.tk.call('place', 'forget', self._w)
    1:     forget = place_forget
    1:     def place_info(self):
               """Return information about the placing options
               for this widget."""
               d = _splitdict(self.tk, self.tk.call('place', 'info', self._w))
               if 'in' in d:
                   d['in'] = self.nametowidget(d['in'])
               return d
    1:     info = place_info
    1:     slaves = place_slaves = Misc.place_slaves
       
    2: class Grid:
           """Geometry manager Grid.
       
    1:     Base class to use the methods grid_* in every widget."""
           # Thanks to Masazumi Yoshikawa (yosikawa@isi.edu)
    1:     def grid_configure(self, cnf={}, **kw):
               """Position a widget in the parent widget in a grid. Use as options:
               column=number - use cell identified with given column (starting with 0)
               columnspan=number - this widget will span several columns
               in=master - use master to contain this widget
               in_=master - see 'in' option description
               ipadx=amount - add internal padding in x direction
               ipady=amount - add internal padding in y direction
               padx=amount - add padding in x direction
               pady=amount - add padding in y direction
               row=number - use cell identified with given row (starting with 0)
               rowspan=number - this widget will span several rows
               sticky=NSEW - if cell is larger on which sides will this
                             widget stick to the cell boundary
               """
               self.tk.call(
                     ('grid', 'configure', self._w)
                     + self._options(cnf, kw))
    1:     grid = configure = config = grid_configure
    1:     bbox = grid_bbox = Misc.grid_bbox
    1:     columnconfigure = grid_columnconfigure = Misc.grid_columnconfigure
    1:     def grid_forget(self):
               """Unmap this widget."""
               self.tk.call('grid', 'forget', self._w)
    1:     forget = grid_forget
    1:     def grid_remove(self):
               """Unmap this widget but remember the grid options."""
               self.tk.call('grid', 'remove', self._w)
    1:     def grid_info(self):
               """Return information about the options
               for positioning this widget in a grid."""
               d = _splitdict(self.tk, self.tk.call('grid', 'info', self._w))
               if 'in' in d:
                   d['in'] = self.nametowidget(d['in'])
               return d
    1:     info = grid_info
    1:     location = grid_location = Misc.grid_location
    1:     propagate = grid_propagate = Misc.grid_propagate
    1:     rowconfigure = grid_rowconfigure = Misc.grid_rowconfigure
    1:     size = grid_size = Misc.grid_size
    1:     slaves = grid_slaves = Misc.grid_slaves
       
    2: class BaseWidget(Misc):
    1:     """Internal class."""
    1:     def _setup(self, master, cnf):
               """Internal function. Sets up information about children."""
    1:         if _support_default_root:
                   global _default_root
    1:             if not master:
                       if not _default_root:
                           _default_root = Tk()
                       master = _default_root
    1:         self.master = master
    1:         self.tk = master.tk
    1:         name = None
    1:         if 'name' in cnf:
                   name = cnf['name']
                   del cnf['name']
    1:         if not name:
    1:             name = repr(id(self))
    1:         self._name = name
    1:         if master._w=='.':
    1:             self._w = '.' + name
               else:
                   self._w = master._w + '.' + name
    1:         self.children = {}
    1:         if self._name in self.master.children:
                   self.master.children[self._name].destroy()
    1:         self.master.children[self._name] = self
    1:     def __init__(self, master, widgetName, cnf={}, kw={}, extra=()):
               """Construct a widget with the parent widget MASTER, a name WIDGETNAME
               and appropriate options."""
    1:         if kw:
    1:             cnf = _cnfmerge((cnf, kw))
    1:         self.widgetName = widgetName
    1:         BaseWidget._setup(self, master, cnf)
    1:         if self._tclCommands is None:
    1:             self._tclCommands = []
    1:         classes = []
    3:         for k in cnf.keys():
    2:             if type(k) is ClassType:
                       classes.append((k, cnf[k]))
                       del cnf[k]
    1:         self.tk.call(
    1:             (widgetName, self._w) + extra + self._options(cnf))
    1:         for k, v in classes:
                   k.configure(self, v)
    1:     def destroy(self):
               """Destroy this and all descendants widgets."""
    1:         for c in self.children.values(): c.destroy()
    1:         self.tk.call('destroy', self._w)
    1:         if self._name in self.master.children:
    1:             del self.master.children[self._name]
    1:         Misc.destroy(self)
    1:     def _do(self, name, args=()):
               # XXX Obsolete -- better use self.tk.call directly!
               return self.tk.call((self._w, name) + args)
       
    2: class Widget(BaseWidget, Pack, Place, Grid):
           """Internal class.
       
           Base class for a widget which can be positioned with the geometry managers
    1:     Pack, Place or Grid."""
    1:     pass
       
    2: class Toplevel(BaseWidget, Wm):
    1:     """Toplevel widget, e.g. for dialogs."""
    1:     def __init__(self, master=None, cnf={}, **kw):
               """Construct a toplevel widget with the parent MASTER.
       
               Valid resource names: background, bd, bg, borderwidth, class,
               colormap, container, cursor, height, highlightbackground,
               highlightcolor, highlightthickness, menu, relief, screen, takefocus,
               use, visual, width."""
               if kw:
                   cnf = _cnfmerge((cnf, kw))
               extra = ()
               for wmkey in ['screen', 'class_', 'class', 'visual',
                         'colormap']:
                   if wmkey in cnf:
                       val = cnf[wmkey]
                       # TBD: a hack needed because some keys
                       # are not valid as keyword arguments
                       if wmkey[-1] == '_': opt = '-'+wmkey[:-1]
                       else: opt = '-'+wmkey
                       extra = extra + (opt, val)
                       del cnf[wmkey]
               BaseWidget.__init__(self, master, 'toplevel', cnf, {}, extra)
               root = self._root()
               self.iconname(root.iconname())
               self.title(root.title())
               self.protocol("WM_DELETE_WINDOW", self.destroy)
       
    2: class Button(Widget):
    1:     """Button widget."""
    1:     def __init__(self, master=None, cnf={}, **kw):
               """Construct a button widget with the parent MASTER.
       
               STANDARD OPTIONS
       
                   activebackground, activeforeground, anchor,
                   background, bitmap, borderwidth, cursor,
                   disabledforeground, font, foreground
                   highlightbackground, highlightcolor,
                   highlightthickness, image, justify,
                   padx, pady, relief, repeatdelay,
                   repeatinterval, takefocus, text,
                   textvariable, underline, wraplength
       
               WIDGET-SPECIFIC OPTIONS
       
                   command, compound, default, height,
                   overrelief, state, width
               """
               Widget.__init__(self, master, 'button', cnf, kw)
       
    1:     def tkButtonEnter(self, *dummy):
               self.tk.call('tkButtonEnter', self._w)
       
    1:     def tkButtonLeave(self, *dummy):
               self.tk.call('tkButtonLeave', self._w)
       
    1:     def tkButtonDown(self, *dummy):
               self.tk.call('tkButtonDown', self._w)
       
    1:     def tkButtonUp(self, *dummy):
               self.tk.call('tkButtonUp', self._w)
       
    1:     def tkButtonInvoke(self, *dummy):
               self.tk.call('tkButtonInvoke', self._w)
       
    1:     def flash(self):
               """Flash the button.
       
               This is accomplished by redisplaying
               the button several times, alternating between active and
               normal colors. At the end of the flash the button is left
               in the same normal/active state as when the command was
               invoked. This command is ignored if the button's state is
               disabled.
               """
               self.tk.call(self._w, 'flash')
       
    1:     def invoke(self):
               """Invoke the command associated with the button.
       
               The return value is the return value from the command,
               or an empty string if there is no command associated with
               the button. This command is ignored if the button's state
               is disabled.
               """
               return self.tk.call(self._w, 'invoke')
       
       # Indices:
       # XXX I don't like these -- take them away
    1: def AtEnd():
           return 'end'
    1: def AtInsert(*args):
           s = 'insert'
           for a in args:
               if a: s = s + (' ' + a)
           return s
    1: def AtSelFirst():
           return 'sel.first'
    1: def AtSelLast():
           return 'sel.last'
    1: def At(x, y=None):
           if y is None:
               return '@%r' % (x,)
           else:
               return '@%r,%r' % (x, y)
       
    2: class Canvas(Widget, XView, YView):
    1:     """Canvas widget to display graphical elements like lines or text."""
    1:     def __init__(self, master=None, cnf={}, **kw):
               """Construct a canvas widget with the parent MASTER.
       
               Valid resource names: background, bd, bg, borderwidth, closeenough,
               confine, cursor, height, highlightbackground, highlightcolor,
               highlightthickness, insertbackground, insertborderwidth,
               insertofftime, insertontime, insertwidth, offset, relief,
               scrollregion, selectbackground, selectborderwidth, selectforeground,
               state, takefocus, width, xscrollcommand, xscrollincrement,
               yscrollcommand, yscrollincrement."""
    1:         Widget.__init__(self, master, 'canvas', cnf, kw)
    1:     def addtag(self, *args):
               """Internal function."""
               self.tk.call((self._w, 'addtag') + args)
    1:     def addtag_above(self, newtag, tagOrId):
               """Add tag NEWTAG to all items above TAGORID."""
               self.addtag(newtag, 'above', tagOrId)
    1:     def addtag_all(self, newtag):
               """Add tag NEWTAG to all items."""
               self.addtag(newtag, 'all')
    1:     def addtag_below(self, newtag, tagOrId):
               """Add tag NEWTAG to all items below TAGORID."""
               self.addtag(newtag, 'below', tagOrId)
    1:     def addtag_closest(self, newtag, x, y, halo=None, start=None):
               """Add tag NEWTAG to item which is closest to pixel at X, Y.
               If several match take the top-most.
               All items closer than HALO are considered overlapping (all are
               closests). If START is specified the next below this tag is taken."""
               self.addtag(newtag, 'closest', x, y, halo, start)
    1:     def addtag_enclosed(self, newtag, x1, y1, x2, y2):
               """Add tag NEWTAG to all items in the rectangle defined
               by X1,Y1,X2,Y2."""
               self.addtag(newtag, 'enclosed', x1, y1, x2, y2)
    1:     def addtag_overlapping(self, newtag, x1, y1, x2, y2):
               """Add tag NEWTAG to all items which overlap the rectangle
               defined by X1,Y1,X2,Y2."""
               self.addtag(newtag, 'overlapping', x1, y1, x2, y2)
    1:     def addtag_withtag(self, newtag, tagOrId):
               """Add tag NEWTAG to all items with TAGORID."""
               self.addtag(newtag, 'withtag', tagOrId)
    1:     def bbox(self, *args):
               """Return a tuple of X1,Y1,X2,Y2 coordinates for a rectangle
               which encloses all items with tags specified as arguments."""
               return self._getints(
                   self.tk.call((self._w, 'bbox') + args)) or None
    1:     def tag_unbind(self, tagOrId, sequence, funcid=None):
               """Unbind for all items with TAGORID for event SEQUENCE  the
               function identified with FUNCID."""
               self.tk.call(self._w, 'bind', tagOrId, sequence, '')
               if funcid:
                   self.deletecommand(funcid)
    1:     def tag_bind(self, tagOrId, sequence=None, func=None, add=None):
               """Bind to all items with TAGORID at event SEQUENCE a call to function FUNC.
       
               An additional boolean parameter ADD specifies whether FUNC will be
               called additionally to the other bound function or whether it will
               replace the previous function. See bind for the return value."""
               return self._bind((self._w, 'bind', tagOrId),
                         sequence, func, add)
    1:     def canvasx(self, screenx, gridspacing=None):
               """Return the canvas x coordinate of pixel position SCREENX rounded
               to nearest multiple of GRIDSPACING units."""
               return getdouble(self.tk.call(
                   self._w, 'canvasx', screenx, gridspacing))
    1:     def canvasy(self, screeny, gridspacing=None):
               """Return the canvas y coordinate of pixel position SCREENY rounded
               to nearest multiple of GRIDSPACING units."""
               return getdouble(self.tk.call(
                   self._w, 'canvasy', screeny, gridspacing))
    1:     def coords(self, *args):
               """Return a list of coordinates for the item given in ARGS."""
               # XXX Should use _flatten on args
  720:         return map(getdouble,
  720:                            self.tk.splitlist(
  720:                    self.tk.call((self._w, 'coords') + args)))
    1:     def _create(self, itemType, args, kw): # Args: (val, val, ..., cnf={})
               """Internal function."""
  356:         args = _flatten(args)
  356:         cnf = args[-1]
  356:         if type(cnf) in (DictionaryType, TupleType):
                   args = args[:-1]
               else:
  356:             cnf = {}
  356:         return getint(self.tk.call(
  356:             self._w, 'create', itemType,
  356:             *(args + self._options(cnf, kw))))
    1:     def create_arc(self, *args, **kw):
               """Create arc shaped region with coordinates x1,y1,x2,y2."""
   50:         return self._create('arc', args, kw)
    1:     def create_bitmap(self, *args, **kw):
               """Create bitmap with coordinates x1,y1."""
               return self._create('bitmap', args, kw)
    1:     def create_image(self, *args, **kw):
               """Create image item with coordinates x1,y1."""
               return self._create('image', args, kw)
    1:     def create_line(self, *args, **kw):
               """Create line with coordinates x1,y1,...,xn,yn."""
  304:         return self._create('line', args, kw)
    1:     def create_oval(self, *args, **kw):
               """Create oval with coordinates x1,y1,x2,y2."""
               return self._create('oval', args, kw)
    1:     def create_polygon(self, *args, **kw):
               """Create polygon with coordinates x1,y1,...,xn,yn."""
    1:         return self._create('polygon', args, kw)
    1:     def create_rectangle(self, *args, **kw):
               """Create rectangle with coordinates x1,y1,x2,y2."""
               return self._create('rectangle', args, kw)
    1:     def create_text(self, *args, **kw):
               """Create text with coordinates x1,y1."""
    1:         return self._create('text', args, kw)
    1:     def create_window(self, *args, **kw):
               """Create window with coordinates x1,y1,x2,y2."""
               return self._create('window', args, kw)
    1:     def dchars(self, *args):
               """Delete characters of text items identified by tag or id in ARGS (possibly
               several times) from FIRST to LAST character (including)."""
               self.tk.call((self._w, 'dchars') + args)
    1:     def delete(self, *args):
               """Delete items identified by all tag or ids contained in ARGS."""
   13:         self.tk.call((self._w, 'delete') + args)
    1:     def dtag(self, *args):
               """Delete tag or id given as last arguments in ARGS from items
               identified by first argument in ARGS."""
               self.tk.call((self._w, 'dtag') + args)
    1:     def find(self, *args):
               """Internal function."""
               return self._getints(
                   self.tk.call((self._w, 'find') + args)) or ()
    1:     def find_above(self, tagOrId):
               """Return items above TAGORID."""
               return self.find('above', tagOrId)
    1:     def find_all(self):
               """Return all items."""
               return self.find('all')
    1:     def find_below(self, tagOrId):
               """Return all items below TAGORID."""
               return self.find('below', tagOrId)
    1:     def find_closest(self, x, y, halo=None, start=None):
               """Return item which is closest to pixel at X, Y.
               If several match take the top-most.
               All items closer than HALO are considered overlapping (all are
               closests). If START is specified the next below this tag is taken."""
               return self.find('closest', x, y, halo, start)
    1:     def find_enclosed(self, x1, y1, x2, y2):
               """Return all items in rectangle defined
               by X1,Y1,X2,Y2."""
               return self.find('enclosed', x1, y1, x2, y2)
    1:     def find_overlapping(self, x1, y1, x2, y2):
               """Return all items which overlap the rectangle
               defined by X1,Y1,X2,Y2."""
               return self.find('overlapping', x1, y1, x2, y2)
    1:     def find_withtag(self, tagOrId):
               """Return all items with TAGORID."""
               return self.find('withtag', tagOrId)
    1:     def focus(self, *args):
               """Set focus to the first item specified in ARGS."""
               return self.tk.call((self._w, 'focus') + args)
    1:     def gettags(self, *args):
               """Return tags associated with the first item specified in ARGS."""
               return self.tk.splitlist(
                   self.tk.call((self._w, 'gettags') + args))
    1:     def icursor(self, *args):
               """Set cursor at position POS in the item identified by TAGORID.
               In ARGS TAGORID must be first."""
               self.tk.call((self._w, 'icursor') + args)
    1:     def index(self, *args):
               """Return position of cursor as integer in item specified in ARGS."""
               return getint(self.tk.call((self._w, 'index') + args))
    1:     def insert(self, *args):
               """Insert TEXT in item TAGORID at position POS. ARGS must
               be TAGORID POS TEXT."""
               self.tk.call((self._w, 'insert') + args)
    1:     def itemcget(self, tagOrId, option):
               """Return the resource value for an OPTION for item TAGORID."""
               return self.tk.call(
                   (self._w, 'itemcget') + (tagOrId, '-'+option))
    1:     def itemconfigure(self, tagOrId, cnf=None, **kw):
               """Configure resources of an item TAGORID.
       
               The values for resources are specified as keyword
               arguments. To get an overview about
               the allowed keyword arguments call the method without arguments.
               """
  300:         return self._configure(('itemconfigure', tagOrId), cnf, kw)
    1:     itemconfig = itemconfigure
           # lower, tkraise/lift hide Misc.lower, Misc.tkraise/lift,
           # so the preferred name for them is tag_lower, tag_raise
           # (similar to tag_bind, and similar to the Text widget);
           # unfortunately can't delete the old ones yet (maybe in 1.6)
    1:     def tag_lower(self, *args):
               """Lower an item TAGORID given in ARGS
               (optional below another item)."""
               self.tk.call((self._w, 'lower') + args)
    1:     lower = tag_lower
    1:     def move(self, *args):
               """Move an item TAGORID given in ARGS."""
               self.tk.call((self._w, 'move') + args)
    1:     def postscript(self, cnf={}, **kw):
               """Print the contents of the canvas to a postscript
               file. Valid options: colormap, colormode, file, fontmap,
               height, pageanchor, pageheight, pagewidth, pagex, pagey,
               rotate, witdh, x, y."""
               return self.tk.call((self._w, 'postscript') +
                           self._options(cnf, kw))
    1:     def tag_raise(self, *args):
               """Raise an item TAGORID given in ARGS
               (optional above another item)."""
               self.tk.call((self._w, 'raise') + args)
    1:     lift = tkraise = tag_raise
    1:     def scale(self, *args):
               """Scale item TAGORID with XORIGIN, YORIGIN, XSCALE, YSCALE."""
               self.tk.call((self._w, 'scale') + args)
    1:     def scan_mark(self, x, y):
               """Remember the current X, Y coordinates."""
               self.tk.call(self._w, 'scan', 'mark', x, y)
    1:     def scan_dragto(self, x, y, gain=10):
               """Adjust the view of the canvas to GAIN times the
               difference between X and Y and the coordinates given in
               scan_mark."""
               self.tk.call(self._w, 'scan', 'dragto', x, y, gain)
    1:     def select_adjust(self, tagOrId, index):
               """Adjust the end of the selection near the cursor of an item TAGORID to index."""
               self.tk.call(self._w, 'select', 'adjust', tagOrId, index)
    1:     def select_clear(self):
               """Clear the selection if it is in this widget."""
               self.tk.call(self._w, 'select', 'clear')
    1:     def select_from(self, tagOrId, index):
               """Set the fixed end of a selection in item TAGORID to INDEX."""
               self.tk.call(self._w, 'select', 'from', tagOrId, index)
    1:     def select_item(self):
               """Return the item which has the selection."""
               return self.tk.call(self._w, 'select', 'item') or None
    1:     def select_to(self, tagOrId, index):
               """Set the variable end of a selection in item TAGORID to INDEX."""
               self.tk.call(self._w, 'select', 'to', tagOrId, index)
    1:     def type(self, tagOrId):
               """Return the type of the item TAGORID."""
               return self.tk.call(self._w, 'type', tagOrId) or None
       
    2: class Checkbutton(Widget):
    1:     """Checkbutton widget which is either in on- or off-state."""
    1:     def __init__(self, master=None, cnf={}, **kw):
               """Construct a checkbutton widget with the parent MASTER.
       
               Valid resource names: activebackground, activeforeground, anchor,
               background, bd, bg, bitmap, borderwidth, command, cursor,
               disabledforeground, fg, font, foreground, height,
               highlightbackground, highlightcolor, highlightthickness, image,
               indicatoron, justify, offvalue, onvalue, padx, pady, relief,
               selectcolor, selectimage, state, takefocus, text, textvariable,
               underline, variable, width, wraplength."""
               Widget.__init__(self, master, 'checkbutton', cnf, kw)
    1:     def deselect(self):
               """Put the button in off-state."""
               self.tk.call(self._w, 'deselect')
    1:     def flash(self):
               """Flash the button."""
               self.tk.call(self._w, 'flash')
    1:     def invoke(self):
               """Toggle the button and invoke a command if given as resource."""
               return self.tk.call(self._w, 'invoke')
    1:     def select(self):
               """Put the button in on-state."""
               self.tk.call(self._w, 'select')
    1:     def toggle(self):
               """Toggle the button."""
               self.tk.call(self._w, 'toggle')
       
    2: class Entry(Widget, XView):
    1:     """Entry widget which allows to display simple text."""
    1:     def __init__(self, master=None, cnf={}, **kw):
               """Construct an entry widget with the parent MASTER.
       
               Valid resource names: background, bd, bg, borderwidth, cursor,
               exportselection, fg, font, foreground, highlightbackground,
               highlightcolor, highlightthickness, insertbackground,
               insertborderwidth, insertofftime, insertontime, insertwidth,
               invalidcommand, invcmd, justify, relief, selectbackground,
               selectborderwidth, selectforeground, show, state, takefocus,
               textvariable, validate, validatecommand, vcmd, width,
               xscrollcommand."""
               Widget.__init__(self, master, 'entry', cnf, kw)
    1:     def delete(self, first, last=None):
               """Delete text from FIRST to LAST (not included)."""
               self.tk.call(self._w, 'delete', first, last)
    1:     def get(self):
               """Return the text."""
               return self.tk.call(self._w, 'get')
    1:     def icursor(self, index):
               """Insert cursor at INDEX."""
               self.tk.call(self._w, 'icursor', index)
    1:     def index(self, index):
               """Return position of cursor."""
               return getint(self.tk.call(
                   self._w, 'index', index))
    1:     def insert(self, index, string):
               """Insert STRING at INDEX."""
               self.tk.call(self._w, 'insert', index, string)
    1:     def scan_mark(self, x):
               """Remember the current X, Y coordinates."""
               self.tk.call(self._w, 'scan', 'mark', x)
    1:     def scan_dragto(self, x):
               """Adjust the view of the canvas to 10 times the
               difference between X and Y and the coordinates given in
               scan_mark."""
               self.tk.call(self._w, 'scan', 'dragto', x)
    1:     def selection_adjust(self, index):
               """Adjust the end of the selection near the cursor to INDEX."""
               self.tk.call(self._w, 'selection', 'adjust', index)
    1:     select_adjust = selection_adjust
    1:     def selection_clear(self):
               """Clear the selection if it is in this widget."""
               self.tk.call(self._w, 'selection', 'clear')
    1:     select_clear = selection_clear
    1:     def selection_from(self, index):
               """Set the fixed end of a selection to INDEX."""
               self.tk.call(self._w, 'selection', 'from', index)
    1:     select_from = selection_from
    1:     def selection_present(self):
               """Return True if there are characters selected in the entry, False
               otherwise."""
               return self.tk.getboolean(
                   self.tk.call(self._w, 'selection', 'present'))
    1:     select_present = selection_present
    1:     def selection_range(self, start, end):
               """Set the selection from START to END (not included)."""
               self.tk.call(self._w, 'selection', 'range', start, end)
    1:     select_range = selection_range
    1:     def selection_to(self, index):
               """Set the variable end of a selection to INDEX."""
               self.tk.call(self._w, 'selection', 'to', index)
    1:     select_to = selection_to
       
    2: class Frame(Widget):
    1:     """Frame widget which may contain other widgets and can have a 3D border."""
    1:     def __init__(self, master=None, cnf={}, **kw):
               """Construct a frame widget with the parent MASTER.
       
               Valid resource names: background, bd, bg, borderwidth, class,
               colormap, container, cursor, height, highlightbackground,
               highlightcolor, highlightthickness, relief, takefocus, visual, width."""
               cnf = _cnfmerge((cnf, kw))
               extra = ()
               if 'class_' in cnf:
                   extra = ('-class', cnf['class_'])
                   del cnf['class_']
               elif 'class' in cnf:
                   extra = ('-class', cnf['class'])
                   del cnf['class']
               Widget.__init__(self, master, 'frame', cnf, {}, extra)
       
    2: class Label(Widget):
    1:     """Label widget which can display text and bitmaps."""
    1:     def __init__(self, master=None, cnf={}, **kw):
               """Construct a label widget with the parent MASTER.
       
               STANDARD OPTIONS
       
                   activebackground, activeforeground, anchor,
                   background, bitmap, borderwidth, cursor,
                   disabledforeground, font, foreground,
                   highlightbackground, highlightcolor,
                   highlightthickness, image, justify,
                   padx, pady, relief, takefocus, text,
                   textvariable, underline, wraplength
       
               WIDGET-SPECIFIC OPTIONS
       
                   height, state, width
       
               """
               Widget.__init__(self, master, 'label', cnf, kw)
       
    2: class Listbox(Widget, XView, YView):
    1:     """Listbox widget which can display a list of strings."""
    1:     def __init__(self, master=None, cnf={}, **kw):
               """Construct a listbox widget with the parent MASTER.
       
               Valid resource names: background, bd, bg, borderwidth, cursor,
               exportselection, fg, font, foreground, height, highlightbackground,
               highlightcolor, highlightthickness, relief, selectbackground,
               selectborderwidth, selectforeground, selectmode, setgrid, takefocus,
               width, xscrollcommand, yscrollcommand, listvariable."""
               Widget.__init__(self, master, 'listbox', cnf, kw)
    1:     def activate(self, index):
               """Activate item identified by INDEX."""
               self.tk.call(self._w, 'activate', index)
    1:     def bbox(self, index):
               """Return a tuple of X1,Y1,X2,Y2 coordinates for a rectangle
               which encloses the item identified by the given index."""
               return self._getints(self.tk.call(self._w, 'bbox', index)) or None
    1:     def curselection(self):
               """Return the indices of currently selected item."""
               return self._getints(self.tk.call(self._w, 'curselection')) or ()
    1:     def delete(self, first, last=None):
               """Delete items from FIRST to LAST (included)."""
               self.tk.call(self._w, 'delete', first, last)
    1:     def get(self, first, last=None):
               """Get list of items from FIRST to LAST (included)."""
               if last is not None:
                   return self.tk.splitlist(self.tk.call(
                       self._w, 'get', first, last))
               else:
                   return self.tk.call(self._w, 'get', first)
    1:     def index(self, index):
               """Return index of item identified with INDEX."""
               i = self.tk.call(self._w, 'index', index)
               if i == 'none': return None
               return getint(i)
    1:     def insert(self, index, *elements):
               """Insert ELEMENTS at INDEX."""
               self.tk.call((self._w, 'insert', index) + elements)
    1:     def nearest(self, y):
               """Get index of item which is nearest to y coordinate Y."""
               return getint(self.tk.call(
                   self._w, 'nearest', y))
    1:     def scan_mark(self, x, y):
               """Remember the current X, Y coordinates."""
               self.tk.call(self._w, 'scan', 'mark', x, y)
    1:     def scan_dragto(self, x, y):
               """Adjust the view of the listbox to 10 times the
               difference between X and Y and the coordinates given in
               scan_mark."""
               self.tk.call(self._w, 'scan', 'dragto', x, y)
    1:     def see(self, index):
               """Scroll such that INDEX is visible."""
               self.tk.call(self._w, 'see', index)
    1:     def selection_anchor(self, index):
               """Set the fixed end oft the selection to INDEX."""
               self.tk.call(self._w, 'selection', 'anchor', index)
    1:     select_anchor = selection_anchor
    1:     def selection_clear(self, first, last=None):
               """Clear the selection from FIRST to LAST (included)."""
               self.tk.call(self._w,
                        'selection', 'clear', first, last)
    1:     select_clear = selection_clear
    1:     def selection_includes(self, index):
               """Return 1 if INDEX is part of the selection."""
               return self.tk.getboolean(self.tk.call(
                   self._w, 'selection', 'includes', index))
    1:     select_includes = selection_includes
    1:     def selection_set(self, first, last=None):
               """Set the selection from FIRST to LAST (included) without
               changing the currently selected elements."""
               self.tk.call(self._w, 'selection', 'set', first, last)
    1:     select_set = selection_set
    1:     def size(self):
               """Return the number of elements in the listbox."""
               return getint(self.tk.call(self._w, 'size'))
    1:     def itemcget(self, index, option):
               """Return the resource value for an ITEM and an OPTION."""
               return self.tk.call(
                   (self._w, 'itemcget') + (index, '-'+option))
    1:     def itemconfigure(self, index, cnf=None, **kw):
               """Configure resources of an ITEM.
       
               The values for resources are specified as keyword arguments.
               To get an overview about the allowed keyword arguments
               call the method without arguments.
               Valid resource names: background, bg, foreground, fg,
               selectbackground, selectforeground."""
               return self._configure(('itemconfigure', index), cnf, kw)
    1:     itemconfig = itemconfigure
       
    2: class Menu(Widget):
    1:     """Menu widget which allows to display menu bars, pull-down menus and pop-up menus."""
    1:     def __init__(self, master=None, cnf={}, **kw):
               """Construct menu widget with the parent MASTER.
       
               Valid resource names: activebackground, activeborderwidth,
               activeforeground, background, bd, bg, borderwidth, cursor,
               disabledforeground, fg, font, foreground, postcommand, relief,
               selectcolor, takefocus, tearoff, tearoffcommand, title, type."""
               Widget.__init__(self, master, 'menu', cnf, kw)
    1:     def tk_bindForTraversal(self):
               # obsolete since Tk 4.0
               import warnings
               warnings.warn('tk_bindForTraversal() does nothing and '
                             'will be removed in 3.6',
                             DeprecationWarning, stacklevel=2)
    1:     def tk_mbPost(self):
               self.tk.call('tk_mbPost', self._w)
    1:     def tk_mbUnpost(self):
               self.tk.call('tk_mbUnpost')
    1:     def tk_traverseToMenu(self, char):
               self.tk.call('tk_traverseToMenu', self._w, char)
    1:     def tk_traverseWithinMenu(self, char):
               self.tk.call('tk_traverseWithinMenu', self._w, char)
    1:     def tk_getMenuButtons(self):
               return self.tk.call('tk_getMenuButtons', self._w)
    1:     def tk_nextMenu(self, count):
               self.tk.call('tk_nextMenu', count)
    1:     def tk_nextMenuEntry(self, count):
               self.tk.call('tk_nextMenuEntry', count)
    1:     def tk_invokeMenu(self):
               self.tk.call('tk_invokeMenu', self._w)
    1:     def tk_firstMenu(self):
               self.tk.call('tk_firstMenu', self._w)
    1:     def tk_mbButtonDown(self):
               self.tk.call('tk_mbButtonDown', self._w)
    1:     def tk_popup(self, x, y, entry=""):
               """Post the menu at position X,Y with entry ENTRY."""
               self.tk.call('tk_popup', self._w, x, y, entry)
    1:     def activate(self, index):
               """Activate entry at INDEX."""
               self.tk.call(self._w, 'activate', index)
    1:     def add(self, itemType, cnf={}, **kw):
               """Internal function."""
               self.tk.call((self._w, 'add', itemType) +
                        self._options(cnf, kw))
    1:     def add_cascade(self, cnf={}, **kw):
               """Add hierarchical menu item."""
               self.add('cascade', cnf or kw)
    1:     def add_checkbutton(self, cnf={}, **kw):
               """Add checkbutton menu item."""
               self.add('checkbutton', cnf or kw)
    1:     def add_command(self, cnf={}, **kw):
               """Add command menu item."""
               self.add('command', cnf or kw)
    1:     def add_radiobutton(self, cnf={}, **kw):
               """Addd radio menu item."""
               self.add('radiobutton', cnf or kw)
    1:     def add_separator(self, cnf={}, **kw):
               """Add separator."""
               self.add('separator', cnf or kw)
    1:     def insert(self, index, itemType, cnf={}, **kw):
               """Internal function."""
               self.tk.call((self._w, 'insert', index, itemType) +
                        self._options(cnf, kw))
    1:     def insert_cascade(self, index, cnf={}, **kw):
               """Add hierarchical menu item at INDEX."""
               self.insert(index, 'cascade', cnf or kw)
    1:     def insert_checkbutton(self, index, cnf={}, **kw):
               """Add checkbutton menu item at INDEX."""
               self.insert(index, 'checkbutton', cnf or kw)
    1:     def insert_command(self, index, cnf={}, **kw):
               """Add command menu item at INDEX."""
               self.insert(index, 'command', cnf or kw)
    1:     def insert_radiobutton(self, index, cnf={}, **kw):
               """Addd radio menu item at INDEX."""
               self.insert(index, 'radiobutton', cnf or kw)
    1:     def insert_separator(self, index, cnf={}, **kw):
               """Add separator at INDEX."""
               self.insert(index, 'separator', cnf or kw)
    1:     def delete(self, index1, index2=None):
               """Delete menu items between INDEX1 and INDEX2 (included)."""
               if index2 is None:
                   index2 = index1
       
               num_index1, num_index2 = self.index(index1), self.index(index2)
               if (num_index1 is None) or (num_index2 is None):
                   num_index1, num_index2 = 0, -1
       
               for i in range(num_index1, num_index2 + 1):
                   if 'command' in self.entryconfig(i):
                       c = str(self.entrycget(i, 'command'))
                       if c:
                           self.deletecommand(c)
               self.tk.call(self._w, 'delete', index1, index2)
    1:     def entrycget(self, index, option):
               """Return the resource value of an menu item for OPTION at INDEX."""
               return self.tk.call(self._w, 'entrycget', index, '-' + option)
    1:     def entryconfigure(self, index, cnf=None, **kw):
               """Configure a menu item at INDEX."""
               return self._configure(('entryconfigure', index), cnf, kw)
    1:     entryconfig = entryconfigure
    1:     def index(self, index):
               """Return the index of a menu item identified by INDEX."""
               i = self.tk.call(self._w, 'index', index)
               if i == 'none': return None
               return getint(i)
    1:     def invoke(self, index):
               """Invoke a menu item identified by INDEX and execute
               the associated command."""
               return self.tk.call(self._w, 'invoke', index)
    1:     def post(self, x, y):
               """Display a menu at position X,Y."""
               self.tk.call(self._w, 'post', x, y)
    1:     def type(self, index):
               """Return the type of the menu item at INDEX."""
               return self.tk.call(self._w, 'type', index)
    1:     def unpost(self):
               """Unmap a menu."""
               self.tk.call(self._w, 'unpost')
    1:     def yposition(self, index):
               """Return the y-position of the topmost pixel of the menu item at INDEX."""
               return getint(self.tk.call(
                   self._w, 'yposition', index))
       
    2: class Menubutton(Widget):
    1:     """Menubutton widget, obsolete since Tk8.0."""
    1:     def __init__(self, master=None, cnf={}, **kw):
               Widget.__init__(self, master, 'menubutton', cnf, kw)
       
    2: class Message(Widget):
    1:     """Message widget to display multiline text. Obsolete since Label does it too."""
    1:     def __init__(self, master=None, cnf={}, **kw):
               Widget.__init__(self, master, 'message', cnf, kw)
       
    2: class Radiobutton(Widget):
    1:     """Radiobutton widget which shows only one of several buttons in on-state."""
    1:     def __init__(self, master=None, cnf={}, **kw):
               """Construct a radiobutton widget with the parent MASTER.
       
               Valid resource names: activebackground, activeforeground, anchor,
               background, bd, bg, bitmap, borderwidth, command, cursor,
               disabledforeground, fg, font, foreground, height,
               highlightbackground, highlightcolor, highlightthickness, image,
               indicatoron, justify, padx, pady, relief, selectcolor, selectimage,
               state, takefocus, text, textvariable, underline, value, variable,
               width, wraplength."""
               Widget.__init__(self, master, 'radiobutton', cnf, kw)
    1:     def deselect(self):
               """Put the button in off-state."""
       
               self.tk.call(self._w, 'deselect')
    1:     def flash(self):
               """Flash the button."""
               self.tk.call(self._w, 'flash')
    1:     def invoke(self):
               """Toggle the button and invoke a command if given as resource."""
               return self.tk.call(self._w, 'invoke')
    1:     def select(self):
               """Put the button in on-state."""
               self.tk.call(self._w, 'select')
       
    2: class Scale(Widget):
    1:     """Scale widget which can display a numerical scale."""
    1:     def __init__(self, master=None, cnf={}, **kw):
               """Construct a scale widget with the parent MASTER.
       
               Valid resource names: activebackground, background, bigincrement, bd,
               bg, borderwidth, command, cursor, digits, fg, font, foreground, from,
               highlightbackground, highlightcolor, highlightthickness, label,
               length, orient, relief, repeatdelay, repeatinterval, resolution,
               showvalue, sliderlength, sliderrelief, state, takefocus,
               tickinterval, to, troughcolor, variable, width."""
               Widget.__init__(self, master, 'scale', cnf, kw)
    1:     def get(self):
               """Get the current value as integer or float."""
               value = self.tk.call(self._w, 'get')
               try:
                   return getint(value)
               except ValueError:
                   return getdouble(value)
    1:     def set(self, value):
               """Set the value to VALUE."""
               self.tk.call(self._w, 'set', value)
    1:     def coords(self, value=None):
               """Return a tuple (X,Y) of the point along the centerline of the
               trough that corresponds to VALUE or the current value if None is
               given."""
       
               return self._getints(self.tk.call(self._w, 'coords', value))
    1:     def identify(self, x, y):
               """Return where the point X,Y lies. Valid return values are "slider",
               "though1" and "though2"."""
               return self.tk.call(self._w, 'identify', x, y)
       
    2: class Scrollbar(Widget):
    1:     """Scrollbar widget which displays a slider at a certain position."""
    1:     def __init__(self, master=None, cnf={}, **kw):
               """Construct a scrollbar widget with the parent MASTER.
       
               Valid resource names: activebackground, activerelief,
               background, bd, bg, borderwidth, command, cursor,
               elementborderwidth, highlightbackground,
               highlightcolor, highlightthickness, jump, orient,
               relief, repeatdelay, repeatinterval, takefocus,
               troughcolor, width."""
               Widget.__init__(self, master, 'scrollbar', cnf, kw)
    1:     def activate(self, index):
               """Display the element at INDEX with activebackground and activerelief.
               INDEX can be "arrow1","slider" or "arrow2"."""
               self.tk.call(self._w, 'activate', index)
    1:     def delta(self, deltax, deltay):
               """Return the fractional change of the scrollbar setting if it
               would be moved by DELTAX or DELTAY pixels."""
               return getdouble(
                   self.tk.call(self._w, 'delta', deltax, deltay))
    1:     def fraction(self, x, y):
               """Return the fractional value which corresponds to a slider
               position of X,Y."""
               return getdouble(self.tk.call(self._w, 'fraction', x, y))
    1:     def identify(self, x, y):
               """Return the element under position X,Y as one of
               "arrow1","slider","arrow2" or ""."""
               return self.tk.call(self._w, 'identify', x, y)
    1:     def get(self):
               """Return the current fractional values (upper and lower end)
               of the slider position."""
               return self._getdoubles(self.tk.call(self._w, 'get'))
    1:     def set(self, *args):
               """Set the fractional values of the slider position (upper and
               lower ends as value between 0 and 1)."""
               self.tk.call((self._w, 'set') + args)
       
       
       
    2: class Text(Widget, XView, YView):
    1:     """Text widget which can display text in various forms."""
    1:     def __init__(self, master=None, cnf={}, **kw):
               """Construct a text widget with the parent MASTER.
       
               STANDARD OPTIONS
       
                   background, borderwidth, cursor,
                   exportselection, font, foreground,
                   highlightbackground, highlightcolor,
                   highlightthickness, insertbackground,
                   insertborderwidth, insertofftime,
                   insertontime, insertwidth, padx, pady,
                   relief, selectbackground,
                   selectborderwidth, selectforeground,
                   setgrid, takefocus,
                   xscrollcommand, yscrollcommand,
       
               WIDGET-SPECIFIC OPTIONS
       
                   autoseparators, height, maxundo,
                   spacing1, spacing2, spacing3,
                   state, tabs, undo, width, wrap,
       
               """
               Widget.__init__(self, master, 'text', cnf, kw)
    1:     def bbox(self, *args):
               """Return a tuple of (x,y,width,height) which gives the bounding
               box of the visible part of the character at the index in ARGS."""
               return self._getints(
                   self.tk.call((self._w, 'bbox') + args)) or None
    1:     def tk_textSelectTo(self, index):
               self.tk.call('tk_textSelectTo', self._w, index)
    1:     def tk_textBackspace(self):
               self.tk.call('tk_textBackspace', self._w)
    1:     def tk_textIndexCloser(self, a, b, c):
               self.tk.call('tk_textIndexCloser', self._w, a, b, c)
    1:     def tk_textResetAnchor(self, index):
               self.tk.call('tk_textResetAnchor', self._w, index)
    1:     def compare(self, index1, op, index2):
               """Return whether between index INDEX1 and index INDEX2 the
               relation OP is satisfied. OP is one of <, <=, ==, >=, >, or !=."""
               return self.tk.getboolean(self.tk.call(
                   self._w, 'compare', index1, op, index2))
    1:     def debug(self, boolean=None):
               """Turn on the internal consistency checks of the B-Tree inside the text
               widget according to BOOLEAN."""
               if boolean is None:
                   return self.tk.getboolean(self.tk.call(self._w, 'debug'))
               self.tk.call(self._w, 'debug', boolean)
    1:     def delete(self, index1, index2=None):
               """Delete the characters between INDEX1 and INDEX2 (not included)."""
               self.tk.call(self._w, 'delete', index1, index2)
    1:     def dlineinfo(self, index):
               """Return tuple (x,y,width,height,baseline) giving the bounding box
               and baseline position of the visible part of the line containing
               the character at INDEX."""
               return self._getints(self.tk.call(self._w, 'dlineinfo', index))
    1:     def dump(self, index1, index2=None, command=None, **kw):
               """Return the contents of the widget between index1 and index2.
       
               The type of contents returned in filtered based on the keyword
               parameters; if 'all', 'image', 'mark', 'tag', 'text', or 'window' are
               given and true, then the corresponding items are returned. The result
               is a list of triples of the form (key, value, index). If none of the
               keywords are true then 'all' is used by default.
       
               If the 'command' argument is given, it is called once for each element
               of the list of triples, with the values of each triple serving as the
               arguments to the function. In this case the list is not returned."""
               args = []
               func_name = None
               result = None
               if not command:
                   # Never call the dump command without the -command flag, since the
                   # output could involve Tcl quoting and would be a pain to parse
                   # right. Instead just set the command to build a list of triples
                   # as if we had done the parsing.
                   result = []
                   def append_triple(key, value, index, result=result):
                       result.append((key, value, index))
                   command = append_triple
               try:
                   if not isinstance(command, str):
                       func_name = command = self._register(command)
                   args += ["-command", command]
                   for key in kw:
                       if kw[key]: args.append("-" + key)
                   args.append(index1)
                   if index2:
                       args.append(index2)
                   self.tk.call(self._w, "dump", *args)
                   return result
               finally:
                   if func_name:
                       self.deletecommand(func_name)
       
           ## new in tk8.4
    1:     def edit(self, *args):
               """Internal method
       
               This method controls the undo mechanism and
               the modified flag. The exact behavior of the
               command depends on the option argument that
               follows the edit argument. The following forms
               of the command are currently supported:
       
               edit_modified, edit_redo, edit_reset, edit_separator
               and edit_undo
       
               """
               return self.tk.call(self._w, 'edit', *args)
       
    1:     def edit_modified(self, arg=None):
               """Get or Set the modified flag
       
               If arg is not specified, returns the modified
               flag of the widget. The insert, delete, edit undo and
               edit redo commands or the user can set or clear the
               modified flag. If boolean is specified, sets the
               modified flag of the widget to arg.
               """
               return self.edit("modified", arg)
       
    1:     def edit_redo(self):
               """Redo the last undone edit
       
               When the undo option is true, reapplies the last
               undone edits provided no other edits were done since
               then. Generates an error when the redo stack is empty.
               Does nothing when the undo option is false.
               """
               return self.edit("redo")
       
    1:     def edit_reset(self):
               """Clears the undo and redo stacks
               """
               return self.edit("reset")
       
    1:     def edit_separator(self):
               """Inserts a separator (boundary) on the undo stack.
       
               Does nothing when the undo option is false
               """
               return self.edit("separator")
       
    1:     def edit_undo(self):
               """Undoes the last edit action
       
               If the undo option is true. An edit action is defined
               as all the insert and delete commands that are recorded
               on the undo stack in between two separators. Generates
               an error when the undo stack is empty. Does nothing
               when the undo option is false
               """
               return self.edit("undo")
       
    1:     def get(self, index1, index2=None):
               """Return the text from INDEX1 to INDEX2 (not included)."""
               return self.tk.call(self._w, 'get', index1, index2)
           # (Image commands are new in 8.0)
    1:     def image_cget(self, index, option):
               """Return the value of OPTION of an embedded image at INDEX."""
               if option[:1] != "-":
                   option = "-" + option
               if option[-1:] == "_":
                   option = option[:-1]
               return self.tk.call(self._w, "image", "cget", index, option)
    1:     def image_configure(self, index, cnf=None, **kw):
               """Configure an embedded image at INDEX."""
               return self._configure(('image', 'configure', index), cnf, kw)
    1:     def image_create(self, index, cnf={}, **kw):
               """Create an embedded image at INDEX."""
               return self.tk.call(
                        self._w, "image", "create", index,
                        *self._options(cnf, kw))
    1:     def image_names(self):
               """Return all names of embedded images in this widget."""
               return self.tk.call(self._w, "image", "names")
    1:     def index(self, index):
               """Return the index in the form line.char for INDEX."""
               return str(self.tk.call(self._w, 'index', index))
    1:     def insert(self, index, chars, *args):
               """Insert CHARS before the characters at INDEX. An additional
               tag can be given in ARGS. Additional CHARS and tags can follow in ARGS."""
               self.tk.call((self._w, 'insert', index, chars) + args)
    1:     def mark_gravity(self, markName, direction=None):
               """Change the gravity of a mark MARKNAME to DIRECTION (LEFT or RIGHT).
               Return the current value if None is given for DIRECTION."""
               return self.tk.call(
                   (self._w, 'mark', 'gravity', markName, direction))
    1:     def mark_names(self):
               """Return all mark names."""
               return self.tk.splitlist(self.tk.call(
                   self._w, 'mark', 'names'))
    1:     def mark_set(self, markName, index):
               """Set mark MARKNAME before the character at INDEX."""
               self.tk.call(self._w, 'mark', 'set', markName, index)
    1:     def mark_unset(self, *markNames):
               """Delete all marks in MARKNAMES."""
               self.tk.call((self._w, 'mark', 'unset') + markNames)
    1:     def mark_next(self, index):
               """Return the name of the next mark after INDEX."""
               return self.tk.call(self._w, 'mark', 'next', index) or None
    1:     def mark_previous(self, index):
               """Return the name of the previous mark before INDEX."""
               return self.tk.call(self._w, 'mark', 'previous', index) or None
    1:     def scan_mark(self, x, y):
               """Remember the current X, Y coordinates."""
               self.tk.call(self._w, 'scan', 'mark', x, y)
    1:     def scan_dragto(self, x, y):
               """Adjust the view of the text to 10 times the
               difference between X and Y and the coordinates given in
               scan_mark."""
               self.tk.call(self._w, 'scan', 'dragto', x, y)
    1:     def search(self, pattern, index, stopindex=None,
    1:            forwards=None, backwards=None, exact=None,
    1:            regexp=None, nocase=None, count=None, elide=None):
               """Search PATTERN beginning from INDEX until STOPINDEX.
               Return the index of the first character of a match or an
               empty string."""
               args = [self._w, 'search']
               if forwards: args.append('-forwards')
               if backwards: args.append('-backwards')
               if exact: args.append('-exact')
               if regexp: args.append('-regexp')
               if nocase: args.append('-nocase')
               if elide: args.append('-elide')
               if count: args.append('-count'); args.append(count)
               if pattern and pattern[0] == '-': args.append('--')
               args.append(pattern)
               args.append(index)
               if stopindex: args.append(stopindex)
               return str(self.tk.call(tuple(args)))
    1:     def see(self, index):
               """Scroll such that the character at INDEX is visible."""
               self.tk.call(self._w, 'see', index)
    1:     def tag_add(self, tagName, index1, *args):
               """Add tag TAGNAME to all characters between INDEX1 and index2 in ARGS.
               Additional pairs of indices may follow in ARGS."""
               self.tk.call(
                   (self._w, 'tag', 'add', tagName, index1) + args)
    1:     def tag_unbind(self, tagName, sequence, funcid=None):
               """Unbind for all characters with TAGNAME for event SEQUENCE  the
               function identified with FUNCID."""
               self.tk.call(self._w, 'tag', 'bind', tagName, sequence, '')
               if funcid:
                   self.deletecommand(funcid)
    1:     def tag_bind(self, tagName, sequence, func, add=None):
               """Bind to all characters with TAGNAME at event SEQUENCE a call to function FUNC.
       
               An additional boolean parameter ADD specifies whether FUNC will be
               called additionally to the other bound function or whether it will
               replace the previous function. See bind for the return value."""
               return self._bind((self._w, 'tag', 'bind', tagName),
                         sequence, func, add)
    1:     def tag_cget(self, tagName, option):
               """Return the value of OPTION for tag TAGNAME."""
               if option[:1] != '-':
                   option = '-' + option
               if option[-1:] == '_':
                   option = option[:-1]
               return self.tk.call(self._w, 'tag', 'cget', tagName, option)
    1:     def tag_configure(self, tagName, cnf=None, **kw):
               """Configure a tag TAGNAME."""
               return self._configure(('tag', 'configure', tagName), cnf, kw)
    1:     tag_config = tag_configure
    1:     def tag_delete(self, *tagNames):
               """Delete all tags in TAGNAMES."""
               self.tk.call((self._w, 'tag', 'delete') + tagNames)
    1:     def tag_lower(self, tagName, belowThis=None):
               """Change the priority of tag TAGNAME such that it is lower
               than the priority of BELOWTHIS."""
               self.tk.call(self._w, 'tag', 'lower', tagName, belowThis)
    1:     def tag_names(self, index=None):
               """Return a list of all tag names."""
               return self.tk.splitlist(
                   self.tk.call(self._w, 'tag', 'names', index))
    1:     def tag_nextrange(self, tagName, index1, index2=None):
               """Return a list of start and end index for the first sequence of
               characters between INDEX1 and INDEX2 which all have tag TAGNAME.
               The text is searched forward from INDEX1."""
               return self.tk.splitlist(self.tk.call(
                   self._w, 'tag', 'nextrange', tagName, index1, index2))
    1:     def tag_prevrange(self, tagName, index1, index2=None):
               """Return a list of start and end index for the first sequence of
               characters between INDEX1 and INDEX2 which all have tag TAGNAME.
               The text is searched backwards from INDEX1."""
               return self.tk.splitlist(self.tk.call(
                   self._w, 'tag', 'prevrange', tagName, index1, index2))
    1:     def tag_raise(self, tagName, aboveThis=None):
               """Change the priority of tag TAGNAME such that it is higher
               than the priority of ABOVETHIS."""
               self.tk.call(
                   self._w, 'tag', 'raise', tagName, aboveThis)
    1:     def tag_ranges(self, tagName):
               """Return a list of ranges of text which have tag TAGNAME."""
               return self.tk.splitlist(self.tk.call(
                   self._w, 'tag', 'ranges', tagName))
    1:     def tag_remove(self, tagName, index1, index2=None):
               """Remove tag TAGNAME from all characters between INDEX1 and INDEX2."""
               self.tk.call(
                   self._w, 'tag', 'remove', tagName, index1, index2)
    1:     def window_cget(self, index, option):
               """Return the value of OPTION of an embedded window at INDEX."""
               if option[:1] != '-':
                   option = '-' + option
               if option[-1:] == '_':
                   option = option[:-1]
               return self.tk.call(self._w, 'window', 'cget', index, option)
    1:     def window_configure(self, index, cnf=None, **kw):
               """Configure an embedded window at INDEX."""
               return self._configure(('window', 'configure', index), cnf, kw)
    1:     window_config = window_configure
    1:     def window_create(self, index, cnf={}, **kw):
               """Create a window at INDEX."""
               self.tk.call(
                     (self._w, 'window', 'create', index)
                     + self._options(cnf, kw))
    1:     def window_names(self):
               """Return all names of embedded windows in this widget."""
               return self.tk.splitlist(
                   self.tk.call(self._w, 'window', 'names'))
    1:     def yview_pickplace(self, *what):
               """Obsolete function, use see."""
               self.tk.call((self._w, 'yview', '-pickplace') + what)
       
       
    2: class _setit:
    1:     """Internal class. It wraps the command in the widget OptionMenu."""
    1:     def __init__(self, var, value, callback=None):
               self.__value = value
               self.__var = var
               self.__callback = callback
    1:     def __call__(self, *args):
               self.__var.set(self.__value)
               if self.__callback:
                   self.__callback(self.__value, *args)
       
    2: class OptionMenu(Menubutton):
    1:     """OptionMenu which allows the user to select a value from a menu."""
    1:     def __init__(self, master, variable, value, *values, **kwargs):
               """Construct an optionmenu widget with the parent MASTER, with
               the resource textvariable set to VARIABLE, the initially selected
               value VALUE, the other menu values VALUES and an additional
               keyword argument command."""
               kw = {"borderwidth": 2, "textvariable": variable,
                     "indicatoron": 1, "relief": RAISED, "anchor": "c",
                     "highlightthickness": 2}
               Widget.__init__(self, master, "menubutton", kw)
               self.widgetName = 'tk_optionMenu'
               menu = self.__menu = Menu(self, name="menu", tearoff=0)
               self.menuname = menu._w
               # 'command' is the only supported keyword
               callback = kwargs.get('command')
               if 'command' in kwargs:
                   del kwargs['command']
               if kwargs:
                   raise TclError, 'unknown option -'+kwargs.keys()[0]
               menu.add_command(label=value,
                        command=_setit(variable, value, callback))
               for v in values:
                   menu.add_command(label=v,
                            command=_setit(variable, v, callback))
               self["menu"] = menu
       
    1:     def __getitem__(self, name):
               if name == 'menu':
                   return self.__menu
               return Widget.__getitem__(self, name)
       
    1:     def destroy(self):
               """Destroy this widget and the associated menu."""
               Menubutton.destroy(self)
               self.__menu = None
       
    2: class Image:
    1:     """Base class for images."""
    1:     _last_id = 0
    1:     def __init__(self, imgtype, name=None, cnf={}, master=None, **kw):
               self.name = None
               if not master:
                   master = _default_root
                   if not master:
                       raise RuntimeError, 'Too early to create image'
               self.tk = getattr(master, 'tk', master)
               if not name:
                   Image._last_id += 1
                   name = "pyimage%r" % (Image._last_id,) # tk itself would use image<x>
                   # The following is needed for systems where id(x)
                   # can return a negative number, such as Linux/m68k:
                   if name[0] == '-': name = '_' + name[1:]
               if kw and cnf: cnf = _cnfmerge((cnf, kw))
               elif kw: cnf = kw
               options = ()
               for k, v in cnf.items():
                   if hasattr(v, '__call__'):
                       v = self._register(v)
                   elif k in ('data', 'maskdata'):
                       v = self.tk._createbytearray(v)
                   options = options + ('-'+k, v)
               self.tk.call(('image', 'create', imgtype, name,) + options)
               self.name = name
    1:     def __str__(self): return self.name
    1:     def __del__(self):
               if self.name:
                   try:
                       self.tk.call('image', 'delete', self.name)
                   except TclError:
                       # May happen if the root was destroyed
                       pass
    1:     def __setitem__(self, key, value):
               self.tk.call(self.name, 'configure', '-'+key, value)
    1:     def __getitem__(self, key):
               return self.tk.call(self.name, 'configure', '-'+key)
    1:     def configure(self, **kw):
               """Configure the image."""
               res = ()
               for k, v in _cnfmerge(kw).items():
                   if v is not None:
                       if k[-1] == '_': k = k[:-1]
                       if hasattr(v, '__call__'):
                           v = self._register(v)
                       elif k in ('data', 'maskdata'):
                           v = self.tk._createbytearray(v)
                       res = res + ('-'+k, v)
               self.tk.call((self.name, 'config') + res)
    1:     config = configure
    1:     def height(self):
               """Return the height of the image."""
               return getint(
                   self.tk.call('image', 'height', self.name))
    1:     def type(self):
               """Return the type of the imgage, e.g. "photo" or "bitmap"."""
               return self.tk.call('image', 'type', self.name)
    1:     def width(self):
               """Return the width of the image."""
               return getint(
                   self.tk.call('image', 'width', self.name))
       
    2: class PhotoImage(Image):
    1:     """Widget which can display colored images in GIF, PPM/PGM format."""
    1:     def __init__(self, name=None, cnf={}, master=None, **kw):
               """Create an image with NAME.
       
               Valid resource names: data, format, file, gamma, height, palette,
               width."""
               Image.__init__(self, 'photo', name, cnf, master, **kw)
    1:     def blank(self):
               """Display a transparent image."""
               self.tk.call(self.name, 'blank')
    1:     def cget(self, option):
               """Return the value of OPTION."""
               return self.tk.call(self.name, 'cget', '-' + option)
           # XXX config
    1:     def __getitem__(self, key):
               return self.tk.call(self.name, 'cget', '-' + key)
           # XXX copy -from, -to, ...?
    1:     def copy(self):
               """Return a new PhotoImage with the same image as this widget."""
               destImage = PhotoImage(master=self.tk)
               self.tk.call(destImage, 'copy', self.name)
               return destImage
    1:     def zoom(self,x,y=''):
               """Return a new PhotoImage with the same image as this widget
               but zoom it with X and Y."""
               destImage = PhotoImage(master=self.tk)
               if y=='': y=x
               self.tk.call(destImage, 'copy', self.name, '-zoom',x,y)
               return destImage
    1:     def subsample(self,x,y=''):
               """Return a new PhotoImage based on the same image as this widget
               but use only every Xth or Yth pixel."""
               destImage = PhotoImage(master=self.tk)
               if y=='': y=x
               self.tk.call(destImage, 'copy', self.name, '-subsample',x,y)
               return destImage
    1:     def get(self, x, y):
               """Return the color (red, green, blue) of the pixel at X,Y."""
               return self.tk.call(self.name, 'get', x, y)
    1:     def put(self, data, to=None):
               """Put row formatted colors to image starting from
               position TO, e.g. image.put("{red green} {blue yellow}", to=(4,6))"""
               args = (self.name, 'put', data)
               if to:
                   if to[0] == '-to':
                       to = to[1:]
                   args = args + ('-to',) + tuple(to)
               self.tk.call(args)
           # XXX read
    1:     def write(self, filename, format=None, from_coords=None):
               """Write image to file FILENAME in FORMAT starting from
               position FROM_COORDS."""
               args = (self.name, 'write', filename)
               if format:
                   args = args + ('-format', format)
               if from_coords:
                   args = args + ('-from',) + tuple(from_coords)
               self.tk.call(args)
       
    2: class BitmapImage(Image):
    1:     """Widget which can display a bitmap."""
    1:     def __init__(self, name=None, cnf={}, master=None, **kw):
               """Create a bitmap with NAME.
       
               Valid resource names: background, data, file, foreground, maskdata, maskfile."""
               Image.__init__(self, 'bitmap', name, cnf, master, **kw)
       
    1: def image_names():
           return _default_root.tk.splitlist(_default_root.tk.call('image', 'names'))
       
    1: def image_types():
           return _default_root.tk.splitlist(_default_root.tk.call('image', 'types'))
       
       
    2: class Spinbox(Widget, XView):
    1:     """spinbox widget."""
    1:     def __init__(self, master=None, cnf={}, **kw):
               """Construct a spinbox widget with the parent MASTER.
       
               STANDARD OPTIONS
       
                   activebackground, background, borderwidth,
                   cursor, exportselection, font, foreground,
                   highlightbackground, highlightcolor,
                   highlightthickness, insertbackground,
                   insertborderwidth, insertofftime,
                   insertontime, insertwidth, justify, relief,
                   repeatdelay, repeatinterval,
                   selectbackground, selectborderwidth
                   selectforeground, takefocus, textvariable
                   xscrollcommand.
       
               WIDGET-SPECIFIC OPTIONS
       
                   buttonbackground, buttoncursor,
                   buttondownrelief, buttonuprelief,
                   command, disabledbackground,
                   disabledforeground, format, from,
                   invalidcommand, increment,
                   readonlybackground, state, to,
                   validate, validatecommand values,
                   width, wrap,
               """
               Widget.__init__(self, master, 'spinbox', cnf, kw)
       
    1:     def bbox(self, index):
               """Return a tuple of X1,Y1,X2,Y2 coordinates for a
               rectangle which encloses the character given by index.
       
               The first two elements of the list give the x and y
               coordinates of the upper-left corner of the screen
               area covered by the character (in pixels relative
               to the widget) and the last two elements give the
               width and height of the character, in pixels. The
               bounding box may refer to a region outside the
               visible area of the window.
               """
               return self._getints(self.tk.call(self._w, 'bbox', index)) or None
       
    1:     def delete(self, first, last=None):
               """Delete one or more elements of the spinbox.
       
               First is the index of the first character to delete,
               and last is the index of the character just after
               the last one to delete. If last isn't specified it
               defaults to first+1, i.e. a single character is
               deleted.  This command returns an empty string.
               """
               return self.tk.call(self._w, 'delete', first, last)
       
    1:     def get(self):
               """Returns the spinbox's string"""
               return self.tk.call(self._w, 'get')
       
    1:     def icursor(self, index):
               """Alter the position of the insertion cursor.
       
               The insertion cursor will be displayed just before
               the character given by index. Returns an empty string
               """
               return self.tk.call(self._w, 'icursor', index)
       
    1:     def identify(self, x, y):
               """Returns the name of the widget at position x, y
       
               Return value is one of: none, buttondown, buttonup, entry
               """
               return self.tk.call(self._w, 'identify', x, y)
       
    1:     def index(self, index):
               """Returns the numerical index corresponding to index
               """
               return self.tk.call(self._w, 'index', index)
       
    1:     def insert(self, index, s):
               """Insert string s at index
       
                Returns an empty string.
               """
               return self.tk.call(self._w, 'insert', index, s)
       
    1:     def invoke(self, element):
               """Causes the specified element to be invoked
       
               The element could be buttondown or buttonup
               triggering the action associated with it.
               """
               return self.tk.call(self._w, 'invoke', element)
       
    1:     def scan(self, *args):
               """Internal function."""
               return self._getints(
                   self.tk.call((self._w, 'scan') + args)) or ()
       
    1:     def scan_mark(self, x):
               """Records x and the current view in the spinbox window;
       
               used in conjunction with later scan dragto commands.
               Typically this command is associated with a mouse button
               press in the widget. It returns an empty string.
               """
               return self.scan("mark", x)
       
    1:     def scan_dragto(self, x):
               """Compute the difference between the given x argument
               and the x argument to the last scan mark command
       
               It then adjusts the view left or right by 10 times the
               difference in x-coordinates. This command is typically
               associated with mouse motion events in the widget, to
               produce the effect of dragging the spinbox at high speed
               through the window. The return value is an empty string.
               """
               return self.scan("dragto", x)
       
    1:     def selection(self, *args):
               """Internal function."""
               return self._getints(
                   self.tk.call((self._w, 'selection') + args)) or ()
       
    1:     def selection_adjust(self, index):
               """Locate the end of the selection nearest to the character
               given by index,
       
               Then adjust that end of the selection to be at index
               (i.e including but not going beyond index). The other
               end of the selection is made the anchor point for future
               select to commands. If the selection isn't currently in
               the spinbox, then a new selection is created to include
               the characters between index and the most recent selection
               anchor point, inclusive. Returns an empty string.
               """
               return self.selection("adjust", index)
       
    1:     def selection_clear(self):
               """Clear the selection
       
               If the selection isn't in this widget then the
               command has no effect. Returns an empty string.
               """
               return self.selection("clear")
       
    1:     def selection_element(self, element=None):
               """Sets or gets the currently selected element.
       
               If a spinbutton element is specified, it will be
               displayed depressed
               """
               return self.selection("element", element)
       
       ###########################################################################
       
    2: class LabelFrame(Widget):
    1:     """labelframe widget."""
    1:     def __init__(self, master=None, cnf={}, **kw):
               """Construct a labelframe widget with the parent MASTER.
       
               STANDARD OPTIONS
       
                   borderwidth, cursor, font, foreground,
                   highlightbackground, highlightcolor,
                   highlightthickness, padx, pady, relief,
                   takefocus, text
       
               WIDGET-SPECIFIC OPTIONS
       
                   background, class, colormap, container,
                   height, labelanchor, labelwidget,
                   visual, width
               """
               Widget.__init__(self, master, 'labelframe', cnf, kw)
       
       ########################################################################
       
    2: class PanedWindow(Widget):
    1:     """panedwindow widget."""
    1:     def __init__(self, master=None, cnf={}, **kw):
               """Construct a panedwindow widget with the parent MASTER.
       
               STANDARD OPTIONS
       
                   background, borderwidth, cursor, height,
                   orient, relief, width
       
               WIDGET-SPECIFIC OPTIONS
       
                   handlepad, handlesize, opaqueresize,
                   sashcursor, sashpad, sashrelief,
                   sashwidth, showhandle,
               """
               Widget.__init__(self, master, 'panedwindow', cnf, kw)
       
    1:     def add(self, child, **kw):
               """Add a child widget to the panedwindow in a new pane.
       
               The child argument is the name of the child widget
               followed by pairs of arguments that specify how to
               manage the windows. The possible options and values
               are the ones accepted by the paneconfigure method.
               """
               self.tk.call((self._w, 'add', child) + self._options(kw))
       
    1:     def remove(self, child):
               """Remove the pane containing child from the panedwindow
       
               All geometry management options for child will be forgotten.
               """
               self.tk.call(self._w, 'forget', child)
    1:     forget=remove
       
    1:     def identify(self, x, y):
               """Identify the panedwindow component at point x, y
       
               If the point is over a sash or a sash handle, the result
               is a two element list containing the index of the sash or
               handle, and a word indicating whether it is over a sash
               or a handle, such as {0 sash} or {2 handle}. If the point
               is over any other part of the panedwindow, the result is
               an empty list.
               """
               return self.tk.call(self._w, 'identify', x, y)
       
    1:     def proxy(self, *args):
               """Internal function."""
               return self._getints(
                   self.tk.call((self._w, 'proxy') + args)) or ()
       
    1:     def proxy_coord(self):
               """Return the x and y pair of the most recent proxy location
               """
               return self.proxy("coord")
       
    1:     def proxy_forget(self):
               """Remove the proxy from the display.
               """
               return self.proxy("forget")
       
    1:     def proxy_place(self, x, y):
               """Place the proxy at the given x and y coordinates.
               """
               return self.proxy("place", x, y)
       
    1:     def sash(self, *args):
               """Internal function."""
               return self._getints(
                   self.tk.call((self._w, 'sash') + args)) or ()
       
    1:     def sash_coord(self, index):
               """Return the current x and y pair for the sash given by index.
       
               Index must be an integer between 0 and 1 less than the
               number of panes in the panedwindow. The coordinates given are
               those of the top left corner of the region containing the sash.
               pathName sash dragto index x y This command computes the
               difference between the given coordinates and the coordinates
               given to the last sash coord command for the given sash. It then
               moves that sash the computed difference. The return value is the
               empty string.
               """
               return self.sash("coord", index)
       
    1:     def sash_mark(self, index):
               """Records x and y for the sash given by index;
       
               Used in conjunction with later dragto commands to move the sash.
               """
               return self.sash("mark", index)
       
    1:     def sash_place(self, index, x, y):
               """Place the sash given by index at the given coordinates
               """
               return self.sash("place", index, x, y)
       
    1:     def panecget(self, child, option):
               """Query a management option for window.
       
               Option may be any value allowed by the paneconfigure subcommand
               """
               return self.tk.call(
                   (self._w, 'panecget') + (child, '-'+option))
       
    1:     def paneconfigure(self, tagOrId, cnf=None, **kw):
               """Query or modify the management options for window.
       
               If no option is specified, returns a list describing all
               of the available options for pathName.  If option is
               specified with no value, then the command returns a list
               describing the one named option (this list will be identical
               to the corresponding sublist of the value returned if no
               option is specified). If one or more option-value pairs are
               specified, then the command modifies the given widget
               option(s) to have the given value(s); in this case the
               command returns an empty string. The following options
               are supported:
       
               after window
                   Insert the window after the window specified. window
                   should be the name of a window already managed by pathName.
               before window
                   Insert the window before the window specified. window
                   should be the name of a window already managed by pathName.
               height size
                   Specify a height for the window. The height will be the
                   outer dimension of the window including its border, if
                   any. If size is an empty string, or if -height is not
                   specified, then the height requested internally by the
                   window will be used initially; the height may later be
                   adjusted by the movement of sashes in the panedwindow.
                   Size may be any value accepted by Tk_GetPixels.
               minsize n
                   Specifies that the size of the window cannot be made
                   less than n. This constraint only affects the size of
                   the widget in the paned dimension -- the x dimension
                   for horizontal panedwindows, the y dimension for
                   vertical panedwindows. May be any value accepted by
                   Tk_GetPixels.
               padx n
                   Specifies a non-negative value indicating how much
                   extra space to leave on each side of the window in
                   the X-direction. The value may have any of the forms
                   accepted by Tk_GetPixels.
               pady n
                   Specifies a non-negative value indicating how much
                   extra space to leave on each side of the window in
                   the Y-direction. The value may have any of the forms
                   accepted by Tk_GetPixels.
               sticky style
                   If a window's pane is larger than the requested
                   dimensions of the window, this option may be used
                   to position (or stretch) the window within its pane.
                   Style is a string that contains zero or more of the
                   characters n, s, e or w. The string can optionally
                   contains spaces or commas, but they are ignored. Each
                   letter refers to a side (north, south, east, or west)
                   that the window will "stick" to. If both n and s
                   (or e and w) are specified, the window will be
                   stretched to fill the entire height (or width) of
                   its cavity.
               width size
                   Specify a width for the window. The width will be
                   the outer dimension of the window including its
                   border, if any. If size is an empty string, or
                   if -width is not specified, then the width requested
                   internally by the window will be used initially; the
                   width may later be adjusted by the movement of sashes
                   in the panedwindow. Size may be any value accepted by
                   Tk_GetPixels.
       
               """
               if cnf is None and not kw:
                   return self._getconfigure(self._w, 'paneconfigure', tagOrId)
               if type(cnf) == StringType and not kw:
                   return self._getconfigure1(
                       self._w, 'paneconfigure', tagOrId, '-'+cnf)
               self.tk.call((self._w, 'paneconfigure', tagOrId) +
                        self._options(cnf, kw))
    1:     paneconfig = paneconfigure
       
    1:     def panes(self):
               """Returns an ordered list of the child panes."""
               return self.tk.splitlist(self.tk.call(self._w, 'panes'))
       
       ######################################################################
       # Extensions:
       
    2: class Studbutton(Button):
    1:     def __init__(self, master=None, cnf={}, **kw):
               Widget.__init__(self, master, 'studbutton', cnf, kw)
               self.bind('<Any-Enter>',       self.tkButtonEnter)
               self.bind('<Any-Leave>',       self.tkButtonLeave)
               self.bind('<1>',               self.tkButtonDown)
               self.bind('<ButtonRelease-1>', self.tkButtonUp)
       
    2: class Tributton(Button):
    1:     def __init__(self, master=None, cnf={}, **kw):
               Widget.__init__(self, master, 'tributton', cnf, kw)
               self.bind('<Any-Enter>',       self.tkButtonEnter)
               self.bind('<Any-Leave>',       self.tkButtonLeave)
               self.bind('<1>',               self.tkButtonDown)
               self.bind('<ButtonRelease-1>', self.tkButtonUp)
               self['fg']               = self['bg']
               self['activebackground'] = self['bg']
       
       ######################################################################
       # Test:
       
    1: def _test():
           root = Tk()
           text = "This is Tcl/Tk version %s" % TclVersion
           if TclVersion >= 8.1:
               try:
                   text = text + unicode("\nThis should be a cedilla: \347",
                                         "iso-8859-1")
               except NameError:
                   pass # no unicode support
           label = Label(root, text=text)
           label.pack()
           test = Button(root, text="Click me!",
                     command=lambda root=root: root.test.configure(
                         text="[%s]" % root.test['text']))
           test.pack()
           root.test = test
           quit = Button(root, text="QUIT", command=root.destroy)
           quit.pack()
           # The following three commands are needed so the window pops
           # up on top on Windows...
           root.iconify()
           root.update()
           root.deiconify()
           root.mainloop()
       
    1: if __name__ == '__main__':
           _test()
