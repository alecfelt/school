       # graphicsDisplay.py
       # ------------------
       # Licensing Information: Please do not distribute or publish solutions to this
       # project. You are free to use and extend these projects for educational
       # purposes. The Pacman AI projects were developed at UC Berkeley, primarily by
       # John DeNero (denero@cs.berkeley.edu) and Dan Klein (klein@cs.berkeley.edu).
       # For more info, see http://inst.eecs.berkeley.edu/~cs188/sp09/pacman.html
       
    1: from graphicsUtils import *
    1: import math, time
    1: from game import Directions
       
       ###########################
       #  GRAPHICS DISPLAY CODE  #
       ###########################
       
       # Most code by Dan Klein and John Denero written or rewritten for cs188, UC Berkeley.
       # Some code from a Pacman implementation by LiveWires, and used / modified with permission.
       
    1: DEFAULT_GRID_SIZE = 30.0
    1: INFO_PANE_HEIGHT = 35
    1: BACKGROUND_COLOR = formatColor(0,0,0)
    1: WALL_COLOR = formatColor(0.0/255.0, 51.0/255.0, 255.0/255.0)
    1: INFO_PANE_COLOR = formatColor(.4,.4,0)
    1: SCORE_COLOR = formatColor(.9, .9, .9)
    1: PACMAN_OUTLINE_WIDTH = 2
    1: PACMAN_CAPTURE_OUTLINE_WIDTH = 4
       
    1: GHOST_COLORS = []
    1: GHOST_COLORS.append(formatColor(.9,0,0)) # Red
    1: GHOST_COLORS.append(formatColor(0,.3,.9)) # Blue
    1: GHOST_COLORS.append(formatColor(.98,.41,.07)) # Orange
    1: GHOST_COLORS.append(formatColor(.1,.75,.7)) # Green
    1: GHOST_COLORS.append(formatColor(1.0,0.6,0.0)) # Yellow
    1: GHOST_COLORS.append(formatColor(.4,0.13,0.91)) # Purple
       
    1: TEAM_COLORS = GHOST_COLORS[:2]
       
       GHOST_SHAPE = [
    1:     ( 0,    0.3 ),
    1:     ( 0.25, 0.75 ),
    1:     ( 0.5,  0.3 ),
    1:     ( 0.75, 0.75 ),
    1:     ( 0.75, -0.5 ),
    1:     ( 0.5,  -0.75 ),
    1:     (-0.5,  -0.75 ),
    1:     (-0.75, -0.5 ),
    1:     (-0.75, 0.75 ),
    1:     (-0.5,  0.3 ),
    1:     (-0.25, 0.75 )
         ]
    1: GHOST_SIZE = 0.65
    1: SCARED_COLOR = formatColor(1,1,1)
       
    1: GHOST_VEC_COLORS = map(colorToVector, GHOST_COLORS)
       
    1: PACMAN_COLOR = formatColor(255.0/255.0,255.0/255.0,61.0/255)
    1: PACMAN_SCALE = 0.5
       #pacman_speed = 0.25
       
       # Food
    1: FOOD_COLOR = formatColor(1,1,1)
    1: FOOD_SIZE = 0.1
       
       # Laser
    1: LASER_COLOR = formatColor(1,0,0)
    1: LASER_SIZE = 0.02
       
       # Capsule graphics
    1: CAPSULE_COLOR = formatColor(1,1,1)
    1: CAPSULE_SIZE = 0.25
       
       # Drawing walls
    1: WALL_RADIUS = 0.15
       
    2: class InfoPane:
    1:   def __init__(self, layout, gridSize):
    1:     self.gridSize = gridSize
    1:     self.width = (layout.width) * gridSize
    1:     self.base = (layout.height + 1) * gridSize
    1:     self.height = INFO_PANE_HEIGHT
    1:     self.fontSize = 24
    1:     self.textColor = PACMAN_COLOR
    1:     self.drawPane()
       
    1:   def toScreen(self, pos, y = None):
           """
             Translates a point relative from the bottom left of the info pane.
           """
    1:     if y == None:
             x,y = pos
           else:
    1:       x = pos
       
    1:     x = self.gridSize + x # Margin
    1:     y = self.base + y
    1:     return x,y
       
    1:   def drawPane(self):
    1:     self.scoreText = text( self.toScreen(0, 0  ), self.textColor, "SCORE:    0", "Times", self.fontSize, "bold")
       
    1:   def initializeGhostDistances(self, distances):
           self.ghostDistanceText = []
       
           size = 20
           if self.width < 240:
             size = 12
           if self.width < 160:
             size = 10
       
           for i, d in enumerate(distances):
             t = text( self.toScreen(self.width/2 + self.width/8 * i, 0), GHOST_COLORS[i+1], d, "Times", size, "bold")
             self.ghostDistanceText.append(t)
       
    1:   def updateScore(self, score):
   60:     changeText(self.scoreText, "SCORE: % 4d" % score)
       
    1:   def setTeam(self, isBlue):
           text = "RED TEAM"
           if isBlue: text = "BLUE TEAM"
           self.teamText = text( self.toScreen(300, 0  ), self.textColor, text, "Times", self.fontSize, "bold")
       
    1:   def updateGhostDistances(self, distances):
           if len(distances) == 0: return
           if 'ghostDistanceText' not in dir(self): self.initializeGhostDistances(distances)
           else:
             for i, d in enumerate(distances):
               changeText(self.ghostDistanceText[i], d)
       
    1:   def drawGhost(self):
           pass
       
    1:   def drawPacman(self):
           pass
       
    1:   def drawWarning(self):
           pass
       
    1:   def clearIcon(self):
           pass
       
    1:   def updateMessage(self, message):
           pass
       
    1:   def clearMessage(self):
           pass
       
       
    2: class PacmanGraphics:
    1:   def __init__(self, zoom=1.0, frameTime=0.0, capture=False):
    1:     self.have_window = 0
    1:     self.currentGhostImages = {}
    1:     self.pacmanImage = None
    1:     self.zoom = zoom
    1:     self.gridSize = DEFAULT_GRID_SIZE * zoom
    1:     self.capture = capture
    1:     self.frameTime = frameTime
       
    1:   def initialize(self, state, isBlue = False):
    1:     self.isBlue = isBlue
    1:     self.startGraphics(state)
       
           # self.drawDistributions(state)
    1:     self.distributionImages = None  # Initialized lazily
    1:     self.drawStaticObjects(state)
    1:     self.drawAgentObjects(state)
       
           # Information
    1:     self.previousState = state
       
    1:   def startGraphics(self, state):
    1:     self.layout = state.layout
    1:     layout = self.layout
    1:     self.width = layout.width
    1:     self.height = layout.height
    1:     self.make_window(self.width, self.height)
    1:     self.infoPane = InfoPane(layout, self.gridSize)
    1:     self.currentState = layout
       
    1:   def drawDistributions(self, state):
           walls = state.layout.walls
           dist = []
           for x in range(walls.width):
             distx = []
             dist.append(distx)
             for y in range(walls.height):
                 ( screen_x, screen_y ) = self.to_screen( (x, y) )
                 block = square( (screen_x, screen_y),
                                 0.5 * self.gridSize,
                                 color = BACKGROUND_COLOR,
                                 filled = 1, behind=2)
                 distx.append(block)
           self.distributionImages = dist
       
    1:   def drawStaticObjects(self, state):
    1:     layout = self.layout
    1:     self.drawWalls(layout.walls)
    1:     self.food = self.drawFood(layout.food)
    1:     self.capsules = self.drawCapsules(layout.capsules)
    1:     refresh()
       
    1:   def drawAgentObjects(self, state):
    1:     self.agentImages = [] # (agentState, image)
    2:     for index, agent in enumerate(state.agentStates):
    1:       if agent.isPacman:
    1:         image = self.drawPacman(agent, index)
    1:         self.agentImages.append( (agent, image) )
             else:
               image = self.drawGhost(agent, index)
               self.agentImages.append( (agent, image) )
    1:     refresh()
       
    1:   def swapImages(self, agentIndex, newState):
           """
             Changes an image from a ghost to a pacman or vis versa (for capture)
           """
           prevState, prevImage = self.agentImages[agentIndex]
           for item in prevImage: remove_from_screen(item)
           if newState.isPacman:
             image = self.drawPacman(newState, agentIndex)
             self.agentImages[agentIndex] = (newState, image )
           else:
             image = self.drawGhost(newState, agentIndex)
             self.agentImages[agentIndex] = (newState, image )
           refresh()
       
    1:   def update(self, newState):
   60:     agentIndex = newState._agentMoved
   60:     agentState = newState.agentStates[agentIndex]
       
   60:     if self.agentImages[agentIndex][0].isPacman != agentState.isPacman: self.swapImages(agentIndex, agentState)
   60:     prevState, prevImage = self.agentImages[agentIndex]
   60:     if agentState.isPacman:
   60:       self.animatePacman(agentState, prevState, prevImage)
           else:
             self.moveGhost(agentState, agentIndex, prevState, prevImage)
   60:     self.agentImages[agentIndex] = (agentState, prevImage)
       
   60:     if newState._foodEaten != None:
   13:       self.removeFood(newState._foodEaten, self.food)
   60:     if newState._capsuleEaten != None:
             self.removeCapsule(newState._capsuleEaten, self.capsules)
   60:     self.infoPane.updateScore(newState.score)
   60:     if 'ghostDistances' in dir(newState):
             self.infoPane.updateGhostDistances(newState.ghostDistances)
       
    1:   def make_window(self, width, height):
    1:     grid_width = (width-1) * self.gridSize
    1:     grid_height = (height-1) * self.gridSize
    1:     screen_width = 2*self.gridSize + grid_width
    1:     screen_height = 2*self.gridSize + grid_height + INFO_PANE_HEIGHT
       
    1:     begin_graphics(screen_width,
    1:                    screen_height,
    1:                    BACKGROUND_COLOR,
    1:                    "CS188 Pacman")
       
    1:   def drawPacman(self, pacman, index):
    1:     position = self.getPosition(pacman)
    1:     screen_point = self.to_screen(position)
    1:     endpoints = self.getEndpoints(self.getDirection(pacman))
       
    1:     width = PACMAN_OUTLINE_WIDTH
    1:     outlineColor = PACMAN_COLOR
    1:     fillColor = PACMAN_COLOR
       
    1:     if self.capture:
             outlineColor = TEAM_COLORS[index % 2]
             fillColor = GHOST_COLORS[index]
             width = PACMAN_CAPTURE_OUTLINE_WIDTH
       
    1:     return [circle(screen_point, PACMAN_SCALE * self.gridSize,
    1:                    fillColor = fillColor, outlineColor = outlineColor,
    1:                    endpoints = endpoints,
    1:                    width = width)]
       
    1:   def getEndpoints(self, direction, position=(0,0)):
  241:     x, y = position
  241:     pos = x - int(x) + y - int(y)
  241:     width = 30 + 80 * math.sin(math.pi* pos)
       
  241:     delta = width / 2
  241:     if (direction == 'West'):
  104:       endpoints = (180+delta, 180-delta)
  137:     elif (direction == 'North'):
   28:       endpoints = (90+delta, 90-delta)
  109:     elif (direction == 'South'):
   36:       endpoints = (270+delta, 270-delta)
           else:
   73:       endpoints = (0+delta, 0-delta)
  241:     return endpoints
       
    1:   def movePacman(self, position, direction, image):
  240:     screenPosition = self.to_screen(position)
  240:     endpoints = self.getEndpoints( direction, position )
  240:     r = PACMAN_SCALE * self.gridSize
  240:     moveCircle(image[0], screenPosition, r, endpoints)
  240:     refresh()
       
    1:   def animatePacman(self, pacman, prevPacman, image):
   60:     if self.frameTime < 0:
             print 'Press any key to step forward, "q" to play'
             keys = wait_for_keys()
             if 'q' in keys:
               self.frameTime = 0.1
   60:     if self.frameTime > 0.01 or self.frameTime < 0:
   60:       start = time.time()
   60:       fx, fy = self.getPosition(prevPacman)
   60:       px, py = self.getPosition(pacman)
   60:       frames = 4.0
  300:       for i in range(1,int(frames) + 1):
  240:         pos = px*i/frames + fx*(frames-i)/frames, py*i/frames + fy*(frames-i)/frames
  240:         self.movePacman(pos, self.getDirection(pacman), image)
  240:         refresh()
  240:         sleep(abs(self.frameTime) / frames)
           else:
             self.movePacman(self.getPosition(pacman), self.getDirection(pacman), image)
   60:     refresh()
       
    1:   def getGhostColor(self, ghost, ghostIndex):
           if ghost.scaredTimer > 0:
             return SCARED_COLOR
           else:
             return GHOST_COLORS[ghostIndex]
       
    1:   def drawGhost(self, ghost, agentIndex):
           pos = self.getPosition(ghost)
           dir = self.getDirection(ghost)
           (screen_x, screen_y) = (self.to_screen(pos) )
           coords = []
           for (x, y) in GHOST_SHAPE:
             coords.append((x*self.gridSize*GHOST_SIZE + screen_x, y*self.gridSize*GHOST_SIZE + screen_y))
       
           colour = self.getGhostColor(ghost, agentIndex)
           body = polygon(coords, colour, filled = 1)
           WHITE = formatColor(1.0, 1.0, 1.0)
           BLACK = formatColor(0.0, 0.0, 0.0)
       
           dx = 0
           dy = 0
           if dir == 'North':
             dy = -0.2
           if dir == 'South':
             dy = 0.2
           if dir == 'East':
             dx = 0.2
           if dir == 'West':
             dx = -0.2
           leftEye = circle((screen_x+self.gridSize*GHOST_SIZE*(-0.3+dx/1.5), screen_y-self.gridSize*GHOST_SIZE*(0.3-dy/1.5)), self.gridSize*GHOST_SIZE*0.2, WHITE, WHITE)
           rightEye = circle((screen_x+self.gridSize*GHOST_SIZE*(0.3+dx/1.5), screen_y-self.gridSize*GHOST_SIZE*(0.3-dy/1.5)), self.gridSize*GHOST_SIZE*0.2, WHITE, WHITE)
           leftPupil = circle((screen_x+self.gridSize*GHOST_SIZE*(-0.3+dx), screen_y-self.gridSize*GHOST_SIZE*(0.3-dy)), self.gridSize*GHOST_SIZE*0.08, BLACK, BLACK)
           rightPupil = circle((screen_x+self.gridSize*GHOST_SIZE*(0.3+dx), screen_y-self.gridSize*GHOST_SIZE*(0.3-dy)), self.gridSize*GHOST_SIZE*0.08, BLACK, BLACK)
           ghostImageParts = []
           ghostImageParts.append(body)
           ghostImageParts.append(leftEye)
           ghostImageParts.append(rightEye)
           ghostImageParts.append(leftPupil)
           ghostImageParts.append(rightPupil)
       
           return ghostImageParts
       
    1:   def moveEyes(self, pos, dir, eyes):
           (screen_x, screen_y) = (self.to_screen(pos) )
           dx = 0
           dy = 0
           if dir == 'North':
             dy = -0.2
           if dir == 'South':
             dy = 0.2
           if dir == 'East':
             dx = 0.2
           if dir == 'West':
             dx = -0.2
           moveCircle(eyes[0],(screen_x+self.gridSize*GHOST_SIZE*(-0.3+dx/1.5), screen_y-self.gridSize*GHOST_SIZE*(0.3-dy/1.5)), self.gridSize*GHOST_SIZE*0.2)
           moveCircle(eyes[1],(screen_x+self.gridSize*GHOST_SIZE*(0.3+dx/1.5), screen_y-self.gridSize*GHOST_SIZE*(0.3-dy/1.5)), self.gridSize*GHOST_SIZE*0.2)
           moveCircle(eyes[2],(screen_x+self.gridSize*GHOST_SIZE*(-0.3+dx), screen_y-self.gridSize*GHOST_SIZE*(0.3-dy)), self.gridSize*GHOST_SIZE*0.08)
           moveCircle(eyes[3],(screen_x+self.gridSize*GHOST_SIZE*(0.3+dx), screen_y-self.gridSize*GHOST_SIZE*(0.3-dy)), self.gridSize*GHOST_SIZE*0.08)
       
    1:   def moveGhost(self, ghost, ghostIndex, prevGhost, ghostImageParts):
           old_x, old_y = self.to_screen(self.getPosition(prevGhost))
           new_x, new_y = self.to_screen(self.getPosition(ghost))
           delta = new_x - old_x, new_y - old_y
       
           for ghostImagePart in ghostImageParts:
             move_by(ghostImagePart, delta)
           refresh()
       
           if ghost.scaredTimer > 0:
             color = SCARED_COLOR
           else:
             color = GHOST_COLORS[ghostIndex]
           edit(ghostImageParts[0], ('fill', color), ('outline', color))
           self.moveEyes(self.getPosition(ghost), self.getDirection(ghost), ghostImageParts[-4:])
           refresh()
       
    1:   def getPosition(self, agentState):
  121:     if agentState.configuration == None: return (-1000, -1000)
  121:     return agentState.getPosition()
       
    1:   def getDirection(self, agentState):
  241:     if agentState.configuration == None: return Directions.STOP
  241:     return agentState.configuration.getDirection()
       
    1:   def finish(self):
    1:     end_graphics()
       
    1:   def to_screen(self, point):
  334:     ( x, y ) = point
           #y = self.height - y
  334:     x = (x + 1)*self.gridSize
  334:     y = (self.height  - y)*self.gridSize
  334:     return ( x, y )
       
         # Fixes some TK issue with off-center circles
    1:   def to_screen2(self, point):
   80:     ( x, y ) = point
           #y = self.height - y
   80:     x = (x + 1)*self.gridSize
   80:     y = (self.height  - y)*self.gridSize
   80:     return ( x, y )
       
    1:   def drawWalls(self, wallMatrix):
    1:     wallColor = WALL_COLOR
   21:     for xNum, x in enumerate(wallMatrix):
   20:       if self.capture and (xNum * 2) < wallMatrix.width: wallColor = TEAM_COLORS[0]
   20:       if self.capture and (xNum * 2) >= wallMatrix.width: wallColor = TEAM_COLORS[1]
       
  160:       for yNum, cell in enumerate(x):
  140:         if cell: # There's a wall here
   80:           pos = (xNum, yNum)
   80:           screen = self.to_screen(pos)
   80:           screen2 = self.to_screen2(pos)
       
                 # draw each quadrant of the square based on adjacent walls
   80:           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
   80:           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
   80:           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
   80:           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
   80:           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
   80:           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
   80:           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
   80:           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
       
                 # NE quadrant
   80:           if (not nIsWall) and (not eIsWall):
                   # inner circle
    6:             circle(screen2, WALL_RADIUS * self.gridSize, wallColor, wallColor, (0,91), 'arc')
   80:           if (nIsWall) and (not eIsWall):
                   # vertical line
   14:             line(add(screen, (self.gridSize*WALL_RADIUS, 0)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(-0.5)-1)), wallColor)
   80:           if (not nIsWall) and (eIsWall):
                   # horizontal line
   58:             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
   80:           if (nIsWall) and (eIsWall) and (not neIsWall):
                   # outer circle
    2:             circle(add(screen2, (self.gridSize*2*WALL_RADIUS, self.gridSize*(-2)*WALL_RADIUS)), WALL_RADIUS * self.gridSize-1, wallColor, wallColor, (180,271), 'arc')
    2:             line(add(screen, (self.gridSize*2*WALL_RADIUS-1, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
    2:             line(add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(-2)*WALL_RADIUS+1)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(-0.5))), wallColor)
       
                 # NW quadrant
   80:           if (not nIsWall) and (not wIsWall):
                   # inner circle
    7:             circle(screen2, WALL_RADIUS * self.gridSize, wallColor, wallColor, (90,181), 'arc')
   80:           if (nIsWall) and (not wIsWall):
                   # vertical line
   13:             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, 0)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(-0.5)-1)), wallColor)
   80:           if (not nIsWall) and (wIsWall):
                   # horizontal line
   57:             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
   80:           if (nIsWall) and (wIsWall) and (not nwIsWall):
                   # outer circle
    3:             circle(add(screen2, (self.gridSize*(-2)*WALL_RADIUS, self.gridSize*(-2)*WALL_RADIUS)), WALL_RADIUS * self.gridSize-1, wallColor, wallColor, (270,361), 'arc')
    3:             line(add(screen, (self.gridSize*(-2)*WALL_RADIUS+1, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5), self.gridSize*(-1)*WALL_RADIUS)), wallColor)
    3:             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(-2)*WALL_RADIUS+1)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(-0.5))), wallColor)
       
                 # SE quadrant
   80:           if (not sIsWall) and (not eIsWall):
                   # inner circle
    7:             circle(screen2, WALL_RADIUS * self.gridSize, wallColor, wallColor, (270,361), 'arc')
   80:           if (sIsWall) and (not eIsWall):
                   # vertical line
   13:             line(add(screen, (self.gridSize*WALL_RADIUS, 0)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(0.5)+1)), wallColor)
   80:           if (not sIsWall) and (eIsWall):
                   # horizontal line
   57:             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
   80:           if (sIsWall) and (eIsWall) and (not seIsWall):
                   # outer circle
    3:             circle(add(screen2, (self.gridSize*2*WALL_RADIUS, self.gridSize*(2)*WALL_RADIUS)), WALL_RADIUS * self.gridSize-1, wallColor, wallColor, (90,181), 'arc')
    3:             line(add(screen, (self.gridSize*2*WALL_RADIUS-1, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5, self.gridSize*(1)*WALL_RADIUS)), wallColor)
    3:             line(add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(2)*WALL_RADIUS-1)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(0.5))), wallColor)
       
                 # SW quadrant
   80:           if (not sIsWall) and (not wIsWall):
                   # inner circle
    6:             circle(screen2, WALL_RADIUS * self.gridSize, wallColor, wallColor, (180,271), 'arc')
   80:           if (sIsWall) and (not wIsWall):
                   # vertical line
   14:             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, 0)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(0.5)+1)), wallColor)
   80:           if (not sIsWall) and (wIsWall):
                   # horizontal line
   58:             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
   80:           if (sIsWall) and (wIsWall) and (not swIsWall):
                   # outer circle
    2:             circle(add(screen2, (self.gridSize*(-2)*WALL_RADIUS, self.gridSize*(2)*WALL_RADIUS)), WALL_RADIUS * self.gridSize-1, wallColor, wallColor, (0,91), 'arc')
    2:             line(add(screen, (self.gridSize*(-2)*WALL_RADIUS+1, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5), self.gridSize*(1)*WALL_RADIUS)), wallColor)
    2:             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(2)*WALL_RADIUS-1)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(0.5))), wallColor)
       
    1:   def isWall(self, x, y, walls):
  640:     if x < 0 or y < 0:
   80:       return False
  560:     if x >= walls.width or y >= walls.height:
   78:       return False
  482:     return walls[x][y]
       
    1:   def drawFood(self, foodMatrix ):
    1:     foodImages = []
    1:     color = FOOD_COLOR
   21:     for xNum, x in enumerate(foodMatrix):
   20:       if self.capture and (xNum * 2) <= foodMatrix.width: color = TEAM_COLORS[0]
   20:       if self.capture and (xNum * 2) > foodMatrix.width: color = TEAM_COLORS[1]
   20:       imageRow = []
   20:       foodImages.append(imageRow)
  160:       for yNum, cell in enumerate(x):
  140:         if cell: # There's food here
   13:           screen = self.to_screen((xNum, yNum ))
   13:           dot = circle( screen,
   13:                         FOOD_SIZE * self.gridSize,
   13:                         outlineColor = color, fillColor = color,
   13:                         width = 1)
   13:           imageRow.append(dot)
               else:
  127:           imageRow.append(None)
    1:     return foodImages
       
    1:   def drawCapsules(self, capsules ):
    1:     capsuleImages = {}
    1:     for capsule in capsules:
             ( screen_x, screen_y ) = self.to_screen(capsule)
             dot = circle( (screen_x, screen_y),
                               CAPSULE_SIZE * self.gridSize,
                               outlineColor = CAPSULE_COLOR,
                               fillColor = CAPSULE_COLOR,
                               width = 1)
             capsuleImages[capsule] = dot
    1:     return capsuleImages
       
    1:   def removeFood(self, cell, foodImages ):
   13:     x, y = cell
   13:     remove_from_screen(foodImages[x][y])
       
    1:   def removeCapsule(self, cell, capsuleImages ):
           x, y = cell
           remove_from_screen(capsuleImages[(x, y)])
       
    1:   def drawExpandedCells(self, cells):
           """
           Draws an overlay of expanded grid positions for search agents
           """
           n = float(len(cells))
           baseColor = [1.0, 0.0, 0.0]
           self.clearExpandedCells()
           self.expandedCells = []
           for k, cell in enumerate(cells):
              screenPos = self.to_screen( cell)
              cellColor = formatColor(*[(n-k) * c * .5 / n + .25 for c in baseColor])
              block = square(screenPos,
                       0.5 * self.gridSize,
                       color = cellColor,
                       filled = 1, behind=2)
              self.expandedCells.append(block)
              if self.frameTime < 0:
                refresh()
       
    1:   def clearExpandedCells(self):
           if 'expandedCells' in dir(self) and len(self.expandedCells) > 0:
             for cell in self.expandedCells:
               remove_from_screen(cell)
       
       
    1:   def updateDistributions(self, distributions):
           "Draws an agent's belief distributions"
           if self.distributionImages == None:
             self.drawDistributions(self.previousState)
           for x in range(len(self.distributionImages)):
             for y in range(len(self.distributionImages[0])):
               image = self.distributionImages[x][y]
               weights = [dist[ (x,y) ] for dist in distributions]
       
               if sum(weights) != 0:
                 pass
               # Fog of war
               color = [0.0,0.0,0.0]
               colors = GHOST_VEC_COLORS[1:] # With Pacman
               if self.capture: colors = GHOST_VEC_COLORS
               for weight, gcolor in zip(weights, colors):
                 color = [min(1.0, c + 0.95 * g * weight ** .3) for c,g in zip(color, gcolor)]
               changeColor(image, formatColor(*color))
           refresh()
       
    2: class FirstPersonPacmanGraphics(PacmanGraphics):
    1:   def __init__(self, zoom = 1.0, showGhosts = True, capture = False, frameTime=0):
           PacmanGraphics.__init__(self, zoom, frameTime=frameTime)
           self.showGhosts = showGhosts
           self.capture = capture
       
    1:   def initialize(self, state, isBlue = False):
       
           self.isBlue = isBlue
           PacmanGraphics.startGraphics(self, state)
           # Initialize distribution images
           walls = state.layout.walls
           dist = []
           self.layout = state.layout
       
           # Draw the rest
           self.distributionImages = None  # initialize lazily
           self.drawStaticObjects(state)
           self.drawAgentObjects(state)
       
           # Information
           self.previousState = state
       
    1:   def lookAhead(self, config, state):
           if config.getDirection() == 'Stop':
             return
           else:
             pass
             # Draw relevant ghosts
             allGhosts = state.getGhostStates()
             visibleGhosts = state.getVisibleGhosts()
             for i, ghost in enumerate(allGhosts):
               if ghost in visibleGhosts:
                 self.drawGhost(ghost, i)
               else:
                 self.currentGhostImages[i] = None
       
    1:   def getGhostColor(self, ghost, ghostIndex):
           return GHOST_COLORS[ghostIndex]
       
    1:   def getPosition(self, ghostState):
           if not self.showGhosts and not ghostState.isPacman and ghostState.getPosition()[1] > 1:
             return (-1000, -1000)
           else:
             return PacmanGraphics.getPosition(self, ghostState)
       
    1: def add(x, y):
  618:   return (x[0] + y[0], x[1] + y[1])
       
       
       # Saving graphical output
       # -----------------------
       # Note: to make an animated gif from this postscript output, try the command:
       # convert -delay 7 -loop 1 -compress lzw -layers optimize frame* out.gif
       # convert is part of imagemagick (freeware)
       
    1: SAVE_POSTSCRIPT = False
    1: POSTSCRIPT_OUTPUT_DIR = 'frames'
    1: FRAME_NUMBER = 0
    1: import os
       
    1: def saveFrame():
         "Saves the current graphical output as a postscript file"
         global SAVE_POSTSCRIPT, FRAME_NUMBER, POSTSCRIPT_OUTPUT_DIR
         if not SAVE_POSTSCRIPT: return
         if not os.path.exists(POSTSCRIPT_OUTPUT_DIR): os.mkdir(POSTSCRIPT_OUTPUT_DIR)
         name = os.path.join(POSTSCRIPT_OUTPUT_DIR, 'frame_%08d.ps' % FRAME_NUMBER)
         FRAME_NUMBER += 1
         writePostscript(name) # writes the current canvas
